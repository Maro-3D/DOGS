import bpy
import bmesh
import os
from bpy.types import Panel, Operator
from bpy.props import StringProperty, EnumProperty, BoolProperty
from bpy_extras.io_utils import ImportHelper
from mathutils import Vector

bl_info = {
    "name": "DOGS",
    "description": (
        "This add-on provides a comprehensive suite of tools for managing and "
        "editing armatures and meshes in Blender. Features include adding and "
        "configuring predefined armature types (Basic, Extended, and Digitigrade), "
        "performing advanced mesh editing operations, and managing bone collections "
        "with enhanced controls for rigging. Additionally, it offers "
        "detailed scene and armature statistics, optimized for both PC and Portable "
        "platforms, to help users maintain performance-friendly models."
    ),
    "author": "Marek Hanzelka",
    "version": (0, 0, 1),
    "blender": (4, 2, 0),
    "location": "View3D > Sidebar > DOGS",
    "warning": "",
    "wiki_url": "",
    "tracker_url": "",
    "category": "Rigging",
}

# Example armature data with parent relationships

ARMATURE_TYPES = {
    'Basic': {
        'name': 'BasicArmature',
        'bones': [
            {'name': 'Hips', 'head': (-3.276670312857277e-08, 8.99617713656653e-09, 1.0134485960006714), 'tail': (-1.364489321531437e-07, 8.441280563431519e-09, 1.154377818107605), 'parent': None},
            {'name': 'Spine', 'head': (-1.364489321531437e-07, 8.441280563431519e-09, 1.154377818107605), 'tail': (-6.113365884630184e-07, -0.003658854868263006, 1.3033273220062256), 'parent': 'Hips'},
            {'name': 'Chest', 'head': (-6.113365884630184e-07, -0.003658854868263006, 1.3033273220062256), 'tail': (-4.85356792978564e-07, 0.01909034699201584, 1.4218953847885132), 'parent': 'Spine'},
            {'name': 'UpperChest', 'head': (-4.85356792978564e-07, 0.01909034699201584, 1.4218953847885132), 'tail': (-3.5937705433752853e-07, 0.04183955490589142, 1.4888371229171753), 'parent': 'Chest'},
            {'name': 'Neck', 'head': (-3.5937705433752853e-07, 0.04183955490589142, 1.4888371229171753), 'tail': (-3.3538191246407223e-07, 0.037651997059583664, 1.580440878868103), 'parent': 'UpperChest'},
            {'name': 'Head', 'head': (-3.3538191246407223e-07, 0.037651997059583664, 1.580440878868103), 'tail': (-3.353820829943288e-07, 0.03765201196074486, 1.780912160873413), 'parent': 'Neck'},
            {'name': 'LeftEye', 'head': (0.042711030691862106, -0.05099484696984291, 1.71261727809906), 'tail': (0.042711030691862106, -0.05099484696984291, 1.8776100873947144), 'parent': 'Head'},
            {'name': 'RightEye', 'head': (-0.042711030691862106, -0.05099484696984291, 1.71261727809906), 'tail': (-0.042711030691862106, -0.05099484696984291, 1.8776100873947144), 'parent': 'Head'},
            {'name': 'Shoulder.L', 'head': (0.10301297158002853, 0.04965097829699516, 1.4731693267822266), 'tail': (0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'parent': 'UpperChest'},
            {'name': 'UpperArm.L', 'head': (0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'tail': (0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'parent': 'Shoulder.L'},
            {'name': 'LowerArm.L', 'head': (0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'tail': (0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'parent': 'UpperArm.L'},
            {'name': 'Hand.L', 'head': (0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'tail': (0.8836402893066406, 0.08479226380586624, 1.4557538032531738), 'parent': 'LowerArm.L'},
            {'name': 'ThumbBase.L', 'head': (0.8075568079948425, 0.061285316944122314, 1.4514670372009277), 'tail': (0.8280101418495178, 0.03404620662331581, 1.4395689964294434), 'parent': 'Hand.L'},
            {'name': 'Thumb01.L', 'head': (0.8280102610588074, 0.03404628485441208, 1.4395689964294434), 'tail': (0.8568593263626099, 0.014347835443913937, 1.4261926412582397), 'parent': 'ThumbBase.L'},
            {'name': 'Thumb02.L', 'head': (0.8568592667579651, 0.014347902499139309, 1.4261925220489502), 'tail': (0.8845220804214478, 0.0011952620698139071, 1.4166665077209473), 'parent': 'Thumb01.L'},
            {'name': 'Thumb03.L', 'head': (0.884522020816803, 0.0011951721971854568, 1.4166665077209473), 'tail': (0.9089583158493042, -0.013846841640770435, 1.402328610420227), 'parent': 'Thumb02.L'},
            {'name': 'IndexBase.L', 'head': (0.8928747773170471, 0.05319444090127945, 1.45320725440979), 'tail': (0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'parent': 'Hand.L'},
            {'name': 'Index01.L', 'head': (0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'tail': (0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'parent': 'IndexBase.L'},
            {'name': 'Index02.L', 'head': (0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'tail': (1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'parent': 'Index01.L'},
            {'name': 'Index03.L', 'head': (1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'tail': (1.0611909627914429, 0.053535252809524536, 1.4500150680541992), 'parent': 'Index02.L'},
            {'name': 'MiddleBase.L', 'head': (0.8966166973114014, 0.07919862866401672, 1.454624056816101), 'tail': (0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'parent': 'Hand.L'},
            {'name': 'Middle01.L', 'head': (0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'tail': (0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'parent': 'MiddleBase.L'},
            {'name': 'Middle02.L', 'head': (0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'tail': (1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'parent': 'Middle01.L'},
            {'name': 'Middle03.L', 'head': (1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'tail': (1.0717616081237793, 0.07738028466701508, 1.4513732194900513), 'parent': 'Middle02.L'},
            {'name': 'RingBase.L', 'head': (0.8970993161201477, 0.10432152450084686, 1.4535261392593384), 'tail': (0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'parent': 'Hand.L'},
            {'name': 'Ring01.L', 'head': (0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'tail': (0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'parent': 'RingBase.L'},
            {'name': 'Ring02.L', 'head': (0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'tail': (1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'parent': 'Ring01.L'},
            {'name': 'Ring03.L', 'head': (1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'tail': (1.063450813293457, 0.10443420708179474, 1.4512571096420288), 'parent': 'Ring02.L'},
            {'name': 'PinkyBase.L', 'head': (0.9000670909881592, 0.129251167178154, 1.4518213272094727), 'tail': (0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'parent': 'Hand.L'},
            {'name': 'Pinky01.L', 'head': (0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'tail': (0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'parent': 'PinkyBase.L'},
            {'name': 'Pinky02.L', 'head': (0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'tail': (0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'parent': 'Pinky01.L'},
            {'name': 'Pinky03.L', 'head': (0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'tail': (1.0278985500335693, 0.13414935767650604, 1.4518166780471802), 'parent': 'Pinky02.L'},
            {'name': 'Shoulder.R', 'head': (-0.10301297158002853, 0.04965097829699516, 1.4731693267822266), 'tail': (-0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'parent': 'UpperChest'},
            {'name': 'UpperArm.R', 'head': (-0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'tail': (-0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'parent': 'Shoulder.R'},
            {'name': 'LowerArm.R', 'head': (-0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'tail': (-0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'parent': 'UpperArm.R'},
            {'name': 'Hand.R', 'head': (-0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'tail': (-0.8836402893066406, 0.08479226380586624, 1.4557538032531738), 'parent': 'LowerArm.R'},
            {'name': 'ThumbBase.R', 'head': (-0.8075568079948425, 0.061285316944122314, 1.4514670372009277), 'tail': (-0.8280101418495178, 0.03404620662331581, 1.4395689964294434), 'parent': 'Hand.R'},
            {'name': 'Thumb01.R', 'head': (-0.8280102610588074, 0.03404628485441208, 1.4395689964294434), 'tail': (-0.8568593263626099, 0.014347835443913937, 1.4261926412582397), 'parent': 'ThumbBase.R'},
            {'name': 'Thumb02.R', 'head': (-0.8568592667579651, 0.014347902499139309, 1.4261925220489502), 'tail': (-0.8845220804214478, 0.0011952620698139071, 1.4166665077209473), 'parent': 'Thumb01.R'},
            {'name': 'Thumb03.R', 'head': (-0.884522020816803, 0.0011951721971854568, 1.4166665077209473), 'tail': (-0.9089583158493042, -0.013846841640770435, 1.402328610420227), 'parent': 'Thumb02.R'},
            {'name': 'IndexBase.R', 'head': (-0.8928747773170471, 0.05319444090127945, 1.45320725440979), 'tail': (-0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'parent': 'Hand.R'},
            {'name': 'Index01.R', 'head': (-0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'tail': (-0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'parent': 'IndexBase.R'},
            {'name': 'Index02.R', 'head': (-0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'tail': (-1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'parent': 'Index01.R'},
            {'name': 'Index03.R', 'head': (-1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'tail': (-1.0611909627914429, 0.053535252809524536, 1.4500150680541992), 'parent': 'Index02.R'},
            {'name': 'MiddleBase.R', 'head': (-0.8966166973114014, 0.07919862866401672, 1.454624056816101), 'tail': (-0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'parent': 'Hand.R'},
            {'name': 'Middle01.R', 'head': (-0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'tail': (-0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'parent': 'MiddleBase.R'},
            {'name': 'Middle02.R', 'head': (-0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'tail': (-1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'parent': 'Middle01.R'},
            {'name': 'Middle03.R', 'head': (-1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'tail': (-1.0717616081237793, 0.07738028466701508, 1.4513732194900513), 'parent': 'Middle02.R'},
            {'name': 'RingBase.R', 'head': (-0.8970993161201477, 0.10432152450084686, 1.4535261392593384), 'tail': (-0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'parent': 'Hand.R'},
            {'name': 'Ring01.R', 'head': (-0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'tail': (-0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'parent': 'RingBase.R'},
            {'name': 'Ring02.R', 'head': (-0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'tail': (-1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'parent': 'Ring01.R'},
            {'name': 'Ring03.R', 'head': (-1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'tail': (-1.063450813293457, 0.10443420708179474, 1.4512571096420288), 'parent': 'Ring02.R'},
            {'name': 'PinkyBase.R', 'head': (-0.9000670909881592, 0.129251167178154, 1.4518213272094727), 'tail': (-0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'parent': 'Hand.R'},
            {'name': 'Pinky01.R', 'head': (-0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'tail': (-0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'parent': 'PinkyBase.R'},
            {'name': 'Pinky02.R', 'head': (-0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'tail': (-0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'parent': 'Pinky01.R'},
            {'name': 'Pinky03.R', 'head': (-0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'tail': (-1.0278985500335693, 0.13414935767650604, 1.4518166780471802), 'parent': 'Pinky02.R'},
            {'name': 'UpperLeg.L', 'head': (0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'parent': 'Hips'},
            {'name': 'LowerLeg.L', 'head': (0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'tail': (0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'parent': 'UpperLeg.L'},
            {'name': 'Foot.L', 'head': (0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'tail': (0.11586643010377884, -0.02342723309993744, 0.01288808137178421), 'parent': 'LowerLeg.L'},
            {'name': 'ToeBase.L', 'head': (0.11586642265319824, -0.023427248001098633, 0.012888100929558277), 'tail': (0.11586642265319824, -0.08540254831314087, 0.009776170365512371), 'parent': 'Foot.L'},
            {'name': 'UpperLeg.R', 'head': (-0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (-0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'parent': 'Hips'},
            {'name': 'LowerLeg.R', 'head': (-0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'tail': (-0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'parent': 'UpperLeg.R'},
            {'name': 'Foot.R', 'head': (-0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'tail': (-0.11586643010377884, -0.02342723309993744, 0.01288808137178421), 'parent': 'LowerLeg.R'},
            {'name': 'ToeBase.R', 'head': (-0.11586642265319824, -0.023427248001098633, 0.012888100929558277), 'tail': (-0.11586642265319824, -0.08540254831314087, 0.009776170365512371), 'parent': 'Foot.R'},
        ]
    },
    'Extended':  {
        'name': 'ExtendedArmature',
        'bones': [
            {'name': 'Hips', 'head': (-3.276670312857277e-08, 8.99617713656653e-09, 1.0134485960006714), 'tail': (-1.364489321531437e-07, 8.441280563431519e-09, 1.154377818107605), 'parent': None},
            {'name': 'Spine', 'head': (-1.364489321531437e-07, 8.441280563431519e-09, 1.154377818107605), 'tail': (-6.113365884630184e-07, -0.003658854868263006, 1.3033273220062256), 'parent': 'Hips'},
            {'name': 'Chest', 'head': (-6.113365884630184e-07, -0.003658854868263006, 1.3033273220062256), 'tail': (-4.85356792978564e-07, 0.01909034699201584, 1.4218953847885132), 'parent': 'Spine'},
            {'name': 'UpperChest', 'head': (-4.85356792978564e-07, 0.01909034699201584, 1.4218953847885132), 'tail': (-3.5937705433752853e-07, 0.04183955490589142, 1.4888371229171753), 'parent': 'Chest'},
            {'name': 'Neck', 'head': (-3.5937705433752853e-07, 0.04183955490589142, 1.4888371229171753), 'tail': (-3.3538191246407223e-07, 0.037651997059583664, 1.580440878868103), 'parent': 'UpperChest'},
            {'name': 'Head', 'head': (-3.3538191246407223e-07, 0.037651997059583664, 1.580440878868103), 'tail': (-3.353820829943288e-07, 0.03765201196074486, 1.780912160873413), 'parent': 'Neck'},
            {'name': 'LeftEye', 'head': (0.042711030691862106, -0.05099484696984291, 1.71261727809906), 'tail': (0.042711030691862106, -0.05099484696984291, 1.8776100873947144), 'parent': 'Head'},
            {'name': 'RightEye', 'head': (-0.042711030691862106, -0.05099484696984291, 1.71261727809906), 'tail': (-0.042711030691862106, -0.05099484696984291, 1.8776100873947144), 'parent': 'Head'},
            {'name': 'HairControl', 'head': (-3.353819693074911e-07, 0.03765195235610008, 1.9291330575942993), 'tail': (-3.3538202615090995e-07, 0.03765195980668068, 2.004645347595215), 'parent': 'Head'},
            {'name': 'EarControl', 'head': (-3.353819693074911e-07, 0.08085688948631287, 1.8764070272445679), 'tail': (-3.3538202615090995e-07, 0.08085689693689346, 1.951919436454773), 'parent': 'Head'},
            {'name': 'EarBase.L', 'head': (0.09965306520462036, 0.05731010437011719, 1.8319345712661743), 'tail': (0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'parent': 'EarControl'},
            {'name': 'EarBase.L.001', 'head': (0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'tail': (0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'parent': 'EarBase.L'},
            {'name': 'EarBase.L.002', 'head': (0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'tail': (0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'parent': 'EarBase.L.001'},
            {'name': 'EarBase.L.003', 'head': (0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'tail': (0.2121795415878296, 0.2574557960033417, 1.982040286064148), 'parent': 'EarBase.L.002'},
            {'name': 'EarBase.R', 'head': (-0.09965306520462036, 0.05731010437011719, 1.8319345712661743), 'tail': (-0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'parent': 'EarControl'},
            {'name': 'EarBase.R.001', 'head': (-0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'tail': (-0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'parent': 'EarBase.R'},
            {'name': 'EarBase.R.002', 'head': (-0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'tail': (-0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'parent': 'EarBase.R.001'},
            {'name': 'EarBase.R.003', 'head': (-0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'tail': (-0.2121795415878296, 0.2574557960033417, 1.982040286064148), 'parent': 'EarBase.R.002'},
            {'name': 'SnootBase', 'head': (-3.353819693074911e-07, -0.09560149908065796, 1.6716623306274414), 'tail': (-3.3538202615090995e-07, -0.1363218128681183, 1.6716623306274414), 'parent': 'Head'},
            {'name': 'Snoot', 'head': (-3.3538202615090995e-07, -0.1363218128681183, 1.6716623306274414), 'tail': (-3.3538202615090995e-07, -0.21811982989311218, 1.6716623306274414), 'parent': 'SnootBase'},
            {'name': 'TongueBase', 'head': (-3.353819693074911e-07, -0.013310715556144714, 1.6302706003189087), 'tail': (-3.3538202615090995e-07, -0.05403103306889534, 1.6302706003189087), 'parent': 'Head'},
            {'name': 'Tongue01', 'head': (-3.3538202615090995e-07, -0.05403103306889534, 1.6302706003189087), 'tail': (-3.3538202615090995e-07, -0.09246624261140823, 1.6302704811096191), 'parent': 'TongueBase'},
            {'name': 'Tongue02', 'head': (-3.3538202615090995e-07, -0.09246624261140823, 1.6302704811096191), 'tail': (-3.3538202615090995e-07, -0.13090145587921143, 1.6302704811096191), 'parent': 'Tongue01'},
            {'name': 'Tongue03', 'head': (-3.3538202615090995e-07, -0.13090145587921143, 1.6302704811096191), 'tail': (-3.3538202615090995e-07, -0.16933667659759521, 1.6302706003189087), 'parent': 'Tongue02'},
            {'name': 'Shoulder.L', 'head': (0.10301297158002853, 0.04965097829699516, 1.4731693267822266), 'tail': (0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'parent': 'UpperChest'},
            {'name': 'UpperArm.L', 'head': (0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'tail': (0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'parent': 'Shoulder.L'},
            {'name': 'LowerArm.L', 'head': (0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'tail': (0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'parent': 'UpperArm.L'},
            {'name': 'Hand.L', 'head': (0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'tail': (0.8836402893066406, 0.08479226380586624, 1.4557538032531738), 'parent': 'LowerArm.L'},
            {'name': 'ThumbBase.L', 'head': (0.8075568079948425, 0.061285316944122314, 1.4514670372009277), 'tail': (0.8280101418495178, 0.03404620662331581, 1.4395689964294434), 'parent': 'Hand.L'},
            {'name': 'Thumb01.L', 'head': (0.8280102610588074, 0.03404628485441208, 1.4395689964294434), 'tail': (0.8568593263626099, 0.014347835443913937, 1.4261926412582397), 'parent': 'ThumbBase.L'},
            {'name': 'Thumb02.L', 'head': (0.8568592667579651, 0.014347902499139309, 1.4261925220489502), 'tail': (0.8845220804214478, 0.0011952620698139071, 1.4166665077209473), 'parent': 'Thumb01.L'},
            {'name': 'Thumb03.L', 'head': (0.884522020816803, 0.0011951721971854568, 1.4166665077209473), 'tail': (0.9089583158493042, -0.013846841640770435, 1.402328610420227), 'parent': 'Thumb02.L'},
            {'name': 'IndexBase.L', 'head': (0.8928747773170471, 0.05319444090127945, 1.45320725440979), 'tail': (0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'parent': 'Hand.L'},
            {'name': 'Index01.L', 'head': (0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'tail': (0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'parent': 'IndexBase.L'},
            {'name': 'Index02.L', 'head': (0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'tail': (1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'parent': 'Index01.L'},
            {'name': 'Index03.L', 'head': (1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'tail': (1.0611909627914429, 0.053535252809524536, 1.4500150680541992), 'parent': 'Index02.L'},
            {'name': 'MiddleBase.L', 'head': (0.8966166973114014, 0.07919862866401672, 1.454624056816101), 'tail': (0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'parent': 'Hand.L'},
            {'name': 'Middle01.L', 'head': (0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'tail': (0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'parent': 'MiddleBase.L'},
            {'name': 'Middle02.L', 'head': (0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'tail': (1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'parent': 'Middle01.L'},
            {'name': 'Middle03.L', 'head': (1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'tail': (1.0717616081237793, 0.07738028466701508, 1.4513732194900513), 'parent': 'Middle02.L'},
            {'name': 'RingBase.L', 'head': (0.8970993161201477, 0.10432152450084686, 1.4535261392593384), 'tail': (0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'parent': 'Hand.L'},
            {'name': 'Ring01.L', 'head': (0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'tail': (0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'parent': 'RingBase.L'},
            {'name': 'Ring02.L', 'head': (0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'tail': (1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'parent': 'Ring01.L'},
            {'name': 'Ring03.L', 'head': (1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'tail': (1.063450813293457, 0.10443420708179474, 1.4512571096420288), 'parent': 'Ring02.L'},
            {'name': 'PinkyBase.L', 'head': (0.9000670909881592, 0.129251167178154, 1.4518213272094727), 'tail': (0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'parent': 'Hand.L'},
            {'name': 'Pinky01.L', 'head': (0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'tail': (0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'parent': 'PinkyBase.L'},
            {'name': 'Pinky02.L', 'head': (0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'tail': (0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'parent': 'Pinky01.L'},
            {'name': 'Pinky03.L', 'head': (0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'tail': (1.0278985500335693, 0.13414935767650604, 1.4518166780471802), 'parent': 'Pinky02.L'},
            {'name': 'Shoulder.R', 'head': (-0.10301297158002853, 0.04965097829699516, 1.4731693267822266), 'tail': (-0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'parent': 'UpperChest'},
            {'name': 'UpperArm.R', 'head': (-0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'tail': (-0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'parent': 'Shoulder.R'},
            {'name': 'LowerArm.R', 'head': (-0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'tail': (-0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'parent': 'UpperArm.R'},
            {'name': 'Hand.R', 'head': (-0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'tail': (-0.8836402893066406, 0.08479226380586624, 1.4557538032531738), 'parent': 'LowerArm.R'},
            {'name': 'ThumbBase.R', 'head': (-0.8075568079948425, 0.061285316944122314, 1.4514670372009277), 'tail': (-0.8280101418495178, 0.03404620662331581, 1.4395689964294434), 'parent': 'Hand.R'},
            {'name': 'Thumb01.R', 'head': (-0.8280102610588074, 0.03404628485441208, 1.4395689964294434), 'tail': (-0.8568593263626099, 0.014347835443913937, 1.4261926412582397), 'parent': 'ThumbBase.R'},
            {'name': 'Thumb02.R', 'head': (-0.8568592667579651, 0.014347902499139309, 1.4261925220489502), 'tail': (-0.8845220804214478, 0.0011952620698139071, 1.4166665077209473), 'parent': 'Thumb01.R'},
            {'name': 'Thumb03.R', 'head': (-0.884522020816803, 0.0011951721971854568, 1.4166665077209473), 'tail': (-0.9089583158493042, -0.013846841640770435, 1.402328610420227), 'parent': 'Thumb02.R'},
            {'name': 'IndexBase.R', 'head': (-0.8928747773170471, 0.05319444090127945, 1.45320725440979), 'tail': (-0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'parent': 'Hand.R'},
            {'name': 'Index01.R', 'head': (-0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'tail': (-0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'parent': 'IndexBase.R'},
            {'name': 'Index02.R', 'head': (-0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'tail': (-1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'parent': 'Index01.R'},
            {'name': 'Index03.R', 'head': (-1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'tail': (-1.0611909627914429, 0.053535252809524536, 1.4500150680541992), 'parent': 'Index02.R'},
            {'name': 'MiddleBase.R', 'head': (-0.8966166973114014, 0.07919862866401672, 1.454624056816101), 'tail': (-0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'parent': 'Hand.R'},
            {'name': 'Middle01.R', 'head': (-0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'tail': (-0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'parent': 'MiddleBase.R'},
            {'name': 'Middle02.R', 'head': (-0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'tail': (-1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'parent': 'Middle01.R'},
            {'name': 'Middle03.R', 'head': (-1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'tail': (-1.0717616081237793, 0.07738028466701508, 1.4513732194900513), 'parent': 'Middle02.R'},
            {'name': 'RingBase.R', 'head': (-0.8970993161201477, 0.10432152450084686, 1.4535261392593384), 'tail': (-0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'parent': 'Hand.R'},
            {'name': 'Ring01.R', 'head': (-0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'tail': (-0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'parent': 'RingBase.R'},
            {'name': 'Ring02.R', 'head': (-0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'tail': (-1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'parent': 'Ring01.R'},
            {'name': 'Ring03.R', 'head': (-1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'tail': (-1.063450813293457, 0.10443420708179474, 1.4512571096420288), 'parent': 'Ring02.R'},
            {'name': 'PinkyBase.R', 'head': (-0.9000670909881592, 0.129251167178154, 1.4518213272094727), 'tail': (-0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'parent': 'Hand.R'},
            {'name': 'Pinky01.R', 'head': (-0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'tail': (-0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'parent': 'PinkyBase.R'},
            {'name': 'Pinky02.R', 'head': (-0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'tail': (-0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'parent': 'Pinky01.R'},
            {'name': 'Pinky03.R', 'head': (-0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'tail': (-1.0278985500335693, 0.13414935767650604, 1.4518166780471802), 'parent': 'Pinky02.R'},
            {'name': 'BreastControl', 'head': (0.0, 0.0011782832443714142, 1.401311993598938), 'tail': (0.0, -0.030631203204393387, 1.401311993598938), 'parent': 'Chest'},
            {'name': 'BreastBase.L', 'head': (0.07969589531421661, -0.005622242111712694, 1.3703428506851196), 'tail': (0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'parent': 'BreastControl'},
            {'name': 'Breast.L', 'head': (0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'tail': (0.07969589531421661, -0.11353135108947754, 1.3703428506851196), 'parent': 'BreastBase.L'},
            {'name': 'BreastBase.R', 'head': (-0.07969589531421661, -0.005622242111712694, 1.3703428506851196), 'tail': (-0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'parent': 'BreastControl'},
            {'name': 'Breast.R', 'head': (-0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'tail': (-0.07969589531421661, -0.11353135108947754, 1.3703428506851196), 'parent': 'BreastBase.R'},
            {'name': 'UpperLeg.L', 'head': (0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'parent': 'Hips'},
            {'name': 'LowerLeg.L', 'head': (0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'tail': (0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'parent': 'UpperLeg.L'},
            {'name': 'Foot.L', 'head': (0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'tail': (0.11586643010377884, -0.02342723309993744, 0.01288808137178421), 'parent': 'LowerLeg.L'},
            {'name': 'ToeBase.L', 'head': (0.11586642265319824, -0.023427248001098633, 0.012888100929558277), 'tail': (0.11586642265319824, -0.08540254831314087, 0.009776170365512371), 'parent': 'Foot.L'},
            {'name': 'ToeIndex.L', 'head': (0.07873864471912384, -0.040247172117233276, 0.012325145304203033), 'tail': (0.06413499265909195, -0.10222247242927551, 0.009213212877511978), 'parent': 'ToeBase.L'},
            {'name': 'ToeMiddle.L', 'head': (0.10393428057432175, -0.04562711715698242, 0.011559318751096725), 'tail': (0.10124646872282028, -0.10922753810882568, 0.008146151900291443), 'parent': 'ToeBase.L'},
            {'name': 'ToeRing.L', 'head': (0.1306520700454712, -0.04588256776332855, 0.011559318751096725), 'tail': (0.13913440704345703, -0.10897208750247955, 0.008146151900291443), 'parent': 'ToeBase.L'},
            {'name': 'ToePinky.L', 'head': (0.15407641232013702, -0.04047022759914398, 0.01234879344701767), 'tail': (0.17221635580062866, -0.10150177776813507, 0.009189564734697342), 'parent': 'ToeBase.L'},
            {'name': 'UpperLeg.R', 'head': (-0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (-0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'parent': 'Hips'},
            {'name': 'LowerLeg.R', 'head': (-0.11558228731155396, -0.00017213677347172052, 0.4996494650840759), 'tail': (-0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'parent': 'UpperLeg.R'},
            {'name': 'Foot.R', 'head': (-0.1158667579293251, 0.021370360627770424, 0.0377480685710907), 'tail': (-0.11586643010377884, -0.02342723309993744, 0.01288808137178421), 'parent': 'LowerLeg.R'},
            {'name': 'ToeBase.R', 'head': (-0.11586642265319824, -0.023427248001098633, 0.012888100929558277), 'tail': (-0.11586642265319824, -0.08540254831314087, 0.009776170365512371), 'parent': 'Foot.R'},
            {'name': 'ToeIndex.R', 'head': (-0.07873864471912384, -0.040247172117233276, 0.012325145304203033), 'tail': (-0.06413499265909195, -0.10222247242927551, 0.009213212877511978), 'parent': 'ToeBase.R'},
            {'name': 'ToeMiddle.R', 'head': (-0.10393428057432175, -0.04562711715698242, 0.011559318751096725), 'tail': (-0.10124646872282028, -0.10922753810882568, 0.008146151900291443), 'parent': 'ToeBase.R'},
            {'name': 'ToeRing.R', 'head': (-0.1306520700454712, -0.04588256776332855, 0.011559318751096725), 'tail': (-0.13913440704345703, -0.10897208750247955, 0.008146151900291443), 'parent': 'ToeBase.R'},
            {'name': 'ToePinky.R', 'head': (-0.15407641232013702, -0.04047022759914398, 0.01234879344701767), 'tail': (-0.17221635580062866, -0.10150177776813507, 0.009189564734697342), 'parent': 'ToeBase.R'},
            {'name': 'Belly', 'head': (-4.725722035914259e-08, -0.03702855110168457, 1.1394258737564087), 'tail': (-1.2195842202800122e-07, -0.13853177428245544, 1.1368075609207153), 'parent': 'Hips'},
            {'name': 'TailBase', 'head': (-3.276670668128645e-08, 0.10187624394893646, 1.0934498310089111), 'tail': (-4.2192361604520556e-08, 0.22463145852088928, 1.0934498310089111), 'parent': 'Hips'},
            {'name': 'Tail01', 'head': (-4.2192361604520556e-08, 0.22463145852088928, 1.0934498310089111), 'tail': (-5.161802008046834e-08, 0.3473866581916809, 1.0934499502182007), 'parent': 'TailBase'},
            {'name': 'Tail02', 'head': (-5.161802008046834e-08, 0.3473866581916809, 1.0934499502182007), 'tail': (-6.104367855641613e-08, 0.4701418876647949, 1.0934500694274902), 'parent': 'Tail01'},
            {'name': 'Tail03', 'head': (-6.104367855641613e-08, 0.4701418876647949, 1.0934500694274902), 'tail': (-7.046933347965023e-08, 0.5928971171379089, 1.0934500694274902), 'parent': 'Tail02'},
            {'name': 'Tail04', 'head': (-7.046933347965023e-08, 0.5928971171379089, 1.0934500694274902), 'tail': (-7.989498840288434e-08, 0.7156522870063782, 1.0934500694274902), 'parent': 'Tail03'},
            {'name': 'Tail05', 'head': (-7.989498840288434e-08, 0.7156522870063782, 1.0934500694274902), 'tail': (-8.932064332611844e-08, 0.8384075164794922, 1.0934500694274902), 'parent': 'Tail04'},
            {'name': 'Tail06', 'head': (-8.932064332611844e-08, 0.8384075164794922, 1.0934500694274902), 'tail': (-9.874629824935255e-08, 0.9611627459526062, 1.0934500694274902), 'parent': 'Tail05'},
            {'name': 'Tail07', 'head': (-9.874629824935255e-08, 0.9611627459526062, 1.0934500694274902), 'tail': (-1.0817195317258665e-07, 1.0839179754257202, 1.0934500694274902), 'parent': 'Tail06'},
            {'name': 'Tail08', 'head': (-1.0817195317258665e-07, 1.0839179754257202, 1.0934500694274902), 'tail': (-1.1759760809582076e-07, 1.2066731452941895, 1.0934500694274902), 'parent': 'Tail07'},
            {'name': 'Tail09', 'head': (-1.1759760809582076e-07, 1.2066731452941895, 1.0934500694274902), 'tail': (-1.2702327012448222e-07, 1.3294284343719482, 1.0934500694274902), 'parent': 'Tail08'},
            {'name': 'Tail10', 'head': (-1.2702327012448222e-07, 1.3294284343719482, 1.0934500694274902), 'tail': (-1.364489321531437e-07, 1.452183723449707, 1.0934500694274902), 'parent': 'Tail09'},
            {'name': 'Butt.R', 'head': (-0.07663392275571823, 0.09667296707630157, 0.9645638465881348), 'tail': (-0.09502609819173813, 0.1545158475637436, 0.9259048104286194), 'parent': 'Hips'},
            {'name': 'Butt.L', 'head': (0.07663392275571823, 0.09667296707630157, 0.9645638465881348), 'tail': (0.09502609819173813, 0.1545158475637436, 0.9259048104286194), 'parent': 'Hips'},
            {'name': 'PelvisAdjust.L', 'head': (0.04113205149769783, -0.0505656823515892, 0.938709557056427), 'tail': (0.13262343406677246, -0.15157341957092285, 1.021498680114746), 'parent': 'Hips'},
            {'name': 'PelvisAdjust.R', 'head': (-0.04113205149769783, -0.0505656823515892, 0.938709557056427), 'tail': (-0.13262343406677246, -0.15157341957092285, 1.021498680114746), 'parent': 'Hips'},
        ]
    },
    
    'Digitigrade': {
        'name': 'DigitigradeArmature',
        'bones': [
            {'name': 'Hips', 'head': (-3.276670312857277e-08, 8.99617713656653e-09, 1.0134485960006714), 'tail': (-1.364489321531437e-07, 8.441280563431519e-09, 1.154377818107605), 'parent': None},
            {'name': 'Spine', 'head': (-1.364489321531437e-07, 8.441280563431519e-09, 1.154377818107605), 'tail': (-6.113365884630184e-07, -0.003658854868263006, 1.3033273220062256), 'parent': 'Hips'},
            {'name': 'Chest', 'head': (-6.113365884630184e-07, -0.003658854868263006, 1.3033273220062256), 'tail': (-4.85356792978564e-07, 0.01909034699201584, 1.4218953847885132), 'parent': 'Spine'},
            {'name': 'UpperChest', 'head': (-4.85356792978564e-07, 0.01909034699201584, 1.4218953847885132), 'tail': (-3.5937705433752853e-07, 0.04183955490589142, 1.4888371229171753), 'parent': 'Chest'},
            {'name': 'Neck', 'head': (-3.5937705433752853e-07, 0.04183955490589142, 1.4888371229171753), 'tail': (-3.3538191246407223e-07, 0.037651997059583664, 1.580440878868103), 'parent': 'UpperChest'},
            {'name': 'Head', 'head': (-3.3538191246407223e-07, 0.037651997059583664, 1.580440878868103), 'tail': (-3.353820829943288e-07, 0.03765201196074486, 1.780912160873413), 'parent': 'Neck'},
            {'name': 'LeftEye', 'head': (0.042711030691862106, -0.05099484696984291, 1.71261727809906), 'tail': (0.042711030691862106, -0.05099484696984291, 1.8776100873947144), 'parent': 'Head'},
            {'name': 'RightEye', 'head': (-0.042711030691862106, -0.05099484696984291, 1.71261727809906), 'tail': (-0.042711030691862106, -0.05099484696984291, 1.8776100873947144), 'parent': 'Head'},
            {'name': 'HairControl', 'head': (-3.353819693074911e-07, 0.03765195235610008, 1.9291330575942993), 'tail': (-3.3538202615090995e-07, 0.03765195980668068, 2.004645347595215), 'parent': 'Head'},
            {'name': 'EarControl', 'head': (-3.353819693074911e-07, 0.08085688948631287, 1.8764070272445679), 'tail': (-3.3538202615090995e-07, 0.08085689693689346, 1.951919436454773), 'parent': 'Head'},
            {'name': 'EarBase.L', 'head': (0.09965306520462036, 0.05731010437011719, 1.8319345712661743), 'tail': (0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'parent': 'EarControl'},
            {'name': 'EarBase.L.001', 'head': (0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'tail': (0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'parent': 'EarBase.L'},
            {'name': 'EarBase.L.002', 'head': (0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'tail': (0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'parent': 'EarBase.L.001'},
            {'name': 'EarBase.L.003', 'head': (0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'tail': (0.2121795415878296, 0.2574557960033417, 1.982040286064148), 'parent': 'EarBase.L.002'},
            {'name': 'EarBase.R', 'head': (-0.09965306520462036, 0.05731010437011719, 1.8319345712661743), 'tail': (-0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'parent': 'EarControl'},
            {'name': 'EarBase.R.001', 'head': (-0.13062818348407745, 0.11240413039922714, 1.8732540607452393), 'tail': (-0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'parent': 'EarBase.R'},
            {'name': 'EarBase.R.002', 'head': (-0.15949220955371857, 0.16374324262142181, 1.9117575883865356), 'tail': (-0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'parent': 'EarBase.R.001'},
            {'name': 'EarBase.R.003', 'head': (-0.18548353016376495, 0.20997287333011627, 1.9464290142059326), 'tail': (-0.2121795415878296, 0.2574557960033417, 1.982040286064148), 'parent': 'EarBase.R.002'},
            {'name': 'SnootBase', 'head': (-3.353819693074911e-07, -0.09560149908065796, 1.6716623306274414), 'tail': (-3.3538202615090995e-07, -0.1363218128681183, 1.6716623306274414), 'parent': 'Head'},
            {'name': 'Snoot', 'head': (-3.3538202615090995e-07, -0.1363218128681183, 1.6716623306274414), 'tail': (-3.3538202615090995e-07, -0.21811982989311218, 1.6716623306274414), 'parent': 'SnootBase'},
            {'name': 'TongueBase', 'head': (-3.353819693074911e-07, -0.013310715556144714, 1.6302706003189087), 'tail': (-3.3538202615090995e-07, -0.05403103306889534, 1.6302706003189087), 'parent': 'Head'},
            {'name': 'Tongue01', 'head': (-3.3538202615090995e-07, -0.05403103306889534, 1.6302706003189087), 'tail': (-3.3538202615090995e-07, -0.09246624261140823, 1.6302704811096191), 'parent': 'TongueBase'},
            {'name': 'Tongue02', 'head': (-3.3538202615090995e-07, -0.09246624261140823, 1.6302704811096191), 'tail': (-3.3538202615090995e-07, -0.13090145587921143, 1.6302704811096191), 'parent': 'Tongue01'},
            {'name': 'Tongue03', 'head': (-3.3538202615090995e-07, -0.13090145587921143, 1.6302704811096191), 'tail': (-3.3538202615090995e-07, -0.16933667659759521, 1.6302706003189087), 'parent': 'Tongue02'},
            {'name': 'Shoulder.L', 'head': (0.10301297158002853, 0.04965097829699516, 1.4731693267822266), 'tail': (0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'parent': 'UpperChest'},
            {'name': 'UpperArm.L', 'head': (0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'tail': (0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'parent': 'Shoulder.L'},
            {'name': 'LowerArm.L', 'head': (0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'tail': (0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'parent': 'UpperArm.L'},
            {'name': 'Hand.L', 'head': (0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'tail': (0.8836402893066406, 0.08479226380586624, 1.4557538032531738), 'parent': 'LowerArm.L'},
            {'name': 'ThumbBase.L', 'head': (0.8075568079948425, 0.061285316944122314, 1.4514670372009277), 'tail': (0.8280101418495178, 0.03404620662331581, 1.4395689964294434), 'parent': 'Hand.L'},
            {'name': 'Thumb01.L', 'head': (0.8280102610588074, 0.03404628485441208, 1.4395689964294434), 'tail': (0.8568593263626099, 0.014347835443913937, 1.4261926412582397), 'parent': 'ThumbBase.L'},
            {'name': 'Thumb02.L', 'head': (0.8568592667579651, 0.014347902499139309, 1.4261925220489502), 'tail': (0.8845220804214478, 0.0011952620698139071, 1.4166665077209473), 'parent': 'Thumb01.L'},
            {'name': 'Thumb03.L', 'head': (0.884522020816803, 0.0011951721971854568, 1.4166665077209473), 'tail': (0.9089583158493042, -0.013846841640770435, 1.402328610420227), 'parent': 'Thumb02.L'},
            {'name': 'IndexBase.L', 'head': (0.8928747773170471, 0.05319444090127945, 1.45320725440979), 'tail': (0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'parent': 'Hand.L'},
            {'name': 'Index01.L', 'head': (0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'tail': (0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'parent': 'IndexBase.L'},
            {'name': 'Index02.L', 'head': (0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'tail': (1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'parent': 'Index01.L'},
            {'name': 'Index03.L', 'head': (1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'tail': (1.0611909627914429, 0.053535252809524536, 1.4500150680541992), 'parent': 'Index02.L'},
            {'name': 'MiddleBase.L', 'head': (0.8966166973114014, 0.07919862866401672, 1.454624056816101), 'tail': (0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'parent': 'Hand.L'},
            {'name': 'Middle01.L', 'head': (0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'tail': (0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'parent': 'MiddleBase.L'},
            {'name': 'Middle02.L', 'head': (0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'tail': (1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'parent': 'Middle01.L'},
            {'name': 'Middle03.L', 'head': (1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'tail': (1.0717616081237793, 0.07738028466701508, 1.4513732194900513), 'parent': 'Middle02.L'},
            {'name': 'RingBase.L', 'head': (0.8970993161201477, 0.10432152450084686, 1.4535261392593384), 'tail': (0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'parent': 'Hand.L'},
            {'name': 'Ring01.L', 'head': (0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'tail': (0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'parent': 'RingBase.L'},
            {'name': 'Ring02.L', 'head': (0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'tail': (1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'parent': 'Ring01.L'},
            {'name': 'Ring03.L', 'head': (1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'tail': (1.063450813293457, 0.10443420708179474, 1.4512571096420288), 'parent': 'Ring02.L'},
            {'name': 'PinkyBase.L', 'head': (0.9000670909881592, 0.129251167178154, 1.4518213272094727), 'tail': (0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'parent': 'Hand.L'},
            {'name': 'Pinky01.L', 'head': (0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'tail': (0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'parent': 'PinkyBase.L'},
            {'name': 'Pinky02.L', 'head': (0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'tail': (0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'parent': 'Pinky01.L'},
            {'name': 'Pinky03.L', 'head': (0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'tail': (1.0278985500335693, 0.13414935767650604, 1.4518166780471802), 'parent': 'Pinky02.L'},
            {'name': 'Shoulder.R', 'head': (-0.10301297158002853, 0.04965097829699516, 1.4731693267822266), 'tail': (-0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'parent': 'UpperChest'},
            {'name': 'UpperArm.R', 'head': (-0.20415057241916656, 0.06217292323708534, 1.4731669425964355), 'tail': (-0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'parent': 'Shoulder.R'},
            {'name': 'LowerArm.R', 'head': (-0.4981123208999634, 0.07962759584188461, 1.463351845741272), 'tail': (-0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'parent': 'UpperArm.R'},
            {'name': 'Hand.R', 'head': (-0.7823858857154846, 0.08479239046573639, 1.4557533264160156), 'tail': (-0.8836402893066406, 0.08479226380586624, 1.4557538032531738), 'parent': 'LowerArm.R'},
            {'name': 'ThumbBase.R', 'head': (-0.8075568079948425, 0.061285316944122314, 1.4514670372009277), 'tail': (-0.8280101418495178, 0.03404620662331581, 1.4395689964294434), 'parent': 'Hand.R'},
            {'name': 'Thumb01.R', 'head': (-0.8280102610588074, 0.03404628485441208, 1.4395689964294434), 'tail': (-0.8568593263626099, 0.014347835443913937, 1.4261926412582397), 'parent': 'ThumbBase.R'},
            {'name': 'Thumb02.R', 'head': (-0.8568592667579651, 0.014347902499139309, 1.4261925220489502), 'tail': (-0.8845220804214478, 0.0011952620698139071, 1.4166665077209473), 'parent': 'Thumb01.R'},
            {'name': 'Thumb03.R', 'head': (-0.884522020816803, 0.0011951721971854568, 1.4166665077209473), 'tail': (-0.9089583158493042, -0.013846841640770435, 1.402328610420227), 'parent': 'Thumb02.R'},
            {'name': 'IndexBase.R', 'head': (-0.8928747773170471, 0.05319444090127945, 1.45320725440979), 'tail': (-0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'parent': 'Hand.R'},
            {'name': 'Index01.R', 'head': (-0.9481001496315002, 0.05181490257382393, 1.4515293836593628), 'tail': (-0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'parent': 'IndexBase.R'},
            {'name': 'Index02.R', 'head': (-0.9859917759895325, 0.05232556536793709, 1.4500069618225098), 'tail': (-1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'parent': 'Index01.R'},
            {'name': 'Index03.R', 'head': (-1.0235955715179443, 0.05267110466957092, 1.4500141143798828), 'tail': (-1.0611909627914429, 0.053535252809524536, 1.4500150680541992), 'parent': 'Index02.R'},
            {'name': 'MiddleBase.R', 'head': (-0.8966166973114014, 0.07919862866401672, 1.454624056816101), 'tail': (-0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'parent': 'Hand.R'},
            {'name': 'Middle01.R', 'head': (-0.9591740369796753, 0.07878460735082626, 1.453513741493225), 'tail': (-0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'parent': 'MiddleBase.R'},
            {'name': 'Middle02.R', 'head': (-0.9981223940849304, 0.07906708121299744, 1.4531458616256714), 'tail': (-1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'parent': 'Middle01.R'},
            {'name': 'Middle03.R', 'head': (-1.0349431037902832, 0.0791907012462616, 1.451383352279663), 'tail': (-1.0717616081237793, 0.07738028466701508, 1.4513732194900513), 'parent': 'Middle02.R'},
            {'name': 'RingBase.R', 'head': (-0.8970993161201477, 0.10432152450084686, 1.4535261392593384), 'tail': (-0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'parent': 'Hand.R'},
            {'name': 'Ring01.R', 'head': (-0.9455699920654297, 0.10400514304637909, 1.451685905456543), 'tail': (-0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'parent': 'RingBase.R'},
            {'name': 'Ring02.R', 'head': (-0.986764132976532, 0.10444580018520355, 1.4512639045715332), 'tail': (-1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'parent': 'Ring01.R'},
            {'name': 'Ring03.R', 'head': (-1.025107502937317, 0.10458743572235107, 1.4512583017349243), 'tail': (-1.063450813293457, 0.10443420708179474, 1.4512571096420288), 'parent': 'Ring02.R'},
            {'name': 'PinkyBase.R', 'head': (-0.9000670909881592, 0.129251167178154, 1.4518213272094727), 'tail': (-0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'parent': 'Hand.R'},
            {'name': 'Pinky01.R', 'head': (-0.9387981295585632, 0.13161565363407135, 1.4518100023269653), 'tail': (-0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'parent': 'PinkyBase.R'},
            {'name': 'Pinky02.R', 'head': (-0.9694513082504272, 0.13232189416885376, 1.451812744140625), 'tail': (-0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'parent': 'Pinky01.R'},
            {'name': 'Pinky03.R', 'head': (-0.998674213886261, 0.13325797021389008, 1.4518123865127563), 'tail': (-1.0278985500335693, 0.13414935767650604, 1.4518166780471802), 'parent': 'Pinky02.R'},
            {'name': 'BreastControl', 'head': (0.0, 0.0011782832443714142, 1.401311993598938), 'tail': (0.0, -0.030631203204393387, 1.401311993598938), 'parent': 'Chest'},
            {'name': 'BreastBase.L', 'head': (0.07969589531421661, -0.005622242111712694, 1.3703428506851196), 'tail': (0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'parent': 'BreastControl'},
            {'name': 'Breast.L', 'head': (0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'tail': (0.07969589531421661, -0.11353135108947754, 1.3703428506851196), 'parent': 'BreastBase.L'},
            {'name': 'BreastBase.R', 'head': (-0.07969589531421661, -0.005622242111712694, 1.3703428506851196), 'tail': (-0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'parent': 'BreastControl'},
            {'name': 'Breast.R', 'head': (-0.07969589531421661, -0.03140490502119064, 1.3703428506851196), 'tail': (-0.07969589531421661, -0.11353135108947754, 1.3703428506851196), 'parent': 'BreastBase.R'},
            {'name': 'UpperLeg.L', 'head': (0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (0.11558228731155396, -0.15466615557670593, 0.49964943528175354), 'parent': 'Hips'},
            {'name': 'LowerLeg.L', 'head': (0.11558228731155396, -0.15466615557670593, 0.49964943528175354), 'tail': (0.1158667579293251, 0.07654675096273422, 0.23393091559410095), 'parent': 'UpperLeg.L'},
            {'name': 'Foot.L', 'head': (0.1158667579293251, 0.07654675096273422, 0.23393091559410095), 'tail': (0.11593072861433029, -0.0070274099707603455, 0.0119401216506958), 'parent': 'LowerLeg.L'},
            {'name': 'ToeBase.L', 'head': (0.11586642265319824, -0.023427248001098633, 0.012888100929558277), 'tail': (0.11586642265319824, -0.08540254831314087, 0.009776170365512371), 'parent': 'Foot.L'},
            {'name': 'ToeIndex.L', 'head': (0.07873864471912384, -0.040247172117233276, 0.012325145304203033), 'tail': (0.06413499265909195, -0.10222247242927551, 0.009213212877511978), 'parent': 'ToeBase.L'},
            {'name': 'ToeMiddle.L', 'head': (0.10393428057432175, -0.04562711715698242, 0.011559318751096725), 'tail': (0.10124646872282028, -0.10922753810882568, 0.008146151900291443), 'parent': 'ToeBase.L'},
            {'name': 'ToeRing.L', 'head': (0.1306520700454712, -0.04588256776332855, 0.011559318751096725), 'tail': (0.13913440704345703, -0.10897208750247955, 0.008146151900291443), 'parent': 'ToeBase.L'},
            {'name': 'ToePinky.L', 'head': (0.15407641232013702, -0.04047022759914398, 0.01234879344701767), 'tail': (0.17221635580062866, -0.10150177776813507, 0.009189564734697342), 'parent': 'ToeBase.L'},
            {'name': 'UpperLeg.R', 'head': (-0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (-0.11558228731155396, -0.15466615557670593, 0.49964943528175354), 'parent': 'Hips'},
            {'name': 'LowerLeg.R', 'head': (-0.11558228731155396, -0.15466615557670593, 0.49964943528175354), 'tail': (-0.1158667579293251, 0.07654675096273422, 0.23393091559410095), 'parent': 'UpperLeg.R'},
            {'name': 'Foot.R', 'head': (-0.1158667579293251, 0.07654675096273422, 0.23393091559410095), 'tail': (-0.11593072861433029, -0.0070274099707603455, 0.0119401216506958), 'parent': 'LowerLeg.R'},
            {'name': 'ToeBase.R', 'head': (-0.11586642265319824, -0.023427248001098633, 0.012888100929558277), 'tail': (-0.11586642265319824, -0.08540254831314087, 0.009776170365512371), 'parent': 'Foot.R'},
            {'name': 'ToeIndex.R', 'head': (-0.07873864471912384, -0.040247172117233276, 0.012325145304203033), 'tail': (-0.06413499265909195, -0.10222247242927551, 0.009213212877511978), 'parent': 'ToeBase.R'},
            {'name': 'ToeMiddle.R', 'head': (-0.10393428057432175, -0.04562711715698242, 0.011559318751096725), 'tail': (-0.10124646872282028, -0.10922753810882568, 0.008146151900291443), 'parent': 'ToeBase.R'},
            {'name': 'ToeRing.R', 'head': (-0.1306520700454712, -0.04588256776332855, 0.011559318751096725), 'tail': (-0.13913440704345703, -0.10897208750247955, 0.008146151900291443), 'parent': 'ToeBase.R'},
            {'name': 'ToePinky.R', 'head': (-0.15407641232013702, -0.04047022759914398, 0.01234879344701767), 'tail': (-0.17221635580062866, -0.10150177776813507, 0.009189564734697342), 'parent': 'ToeBase.R'},
            {'name': 'Belly', 'head': (-4.725722035914259e-08, -0.03702855110168457, 1.1394258737564087), 'tail': (-1.2195842202800122e-07, -0.13853177428245544, 1.1368075609207153), 'parent': 'Hips'},
            {'name': 'UpperLegDigi.L', 'head': (0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (0.11564625799655914, -0.23823842406272888, 0.27766358852386475), 'parent': 'Hips'},
            {'name': 'LowerLegDigi.L', 'head': (0.11564625799655914, -0.23823842406272888, 0.27766358852386475), 'tail': (0.11593072861433029, -0.007025511935353279, 0.011945071630179882), 'parent': 'UpperLegDigi.L'},
            {'name': 'FootDigi.L', 'head': (0.11593072861433029, -0.007025511935353279, 0.011945071630179882), 'tail': (0.11593072861433029, -0.036454856395721436, 0.011945066973567009), 'parent': 'LowerLegDigi.L'},
            {'name': 'UpperLegDigi.R', 'head': (-0.11546389758586884, 8.881999633558735e-07, 0.9104781150817871), 'tail': (-0.11564625799655914, -0.23823842406272888, 0.27766358852386475), 'parent': 'Hips'},
            {'name': 'LowerLegDigi.R', 'head': (-0.11564625799655914, -0.23823842406272888, 0.27766358852386475), 'tail': (-0.11593072861433029, -0.007025511935353279, 0.011945071630179882), 'parent': 'UpperLegDigi.R'},
            {'name': 'FootDigi.R', 'head': (-0.11593072861433029, -0.007025511935353279, 0.011945071630179882), 'tail': (-0.11593072861433029, -0.036454856395721436, 0.011945066973567009), 'parent': 'LowerLegDigi.R'},
            {'name': 'PelvisAdjust.L', 'head': (0.04113205149769783, -0.0505656823515892, 0.938709557056427), 'tail': (0.13262343406677246, -0.15157341957092285, 1.021498680114746), 'parent': 'Hips'},
            {'name': 'PelvisAdjust.R', 'head': (-0.04113205149769783, -0.0505656823515892, 0.938709557056427), 'tail': (-0.13262343406677246, -0.15157341957092285, 1.021498680114746), 'parent': 'Hips'},
            {'name': 'TailBase', 'head': (-3.276670668128645e-08, 0.10187624394893646, 1.0934498310089111), 'tail': (-4.2192361604520556e-08, 0.22463145852088928, 1.0934498310089111), 'parent': 'Hips'},
            {'name': 'Tail01', 'head': (-4.2192361604520556e-08, 0.22463145852088928, 1.0934498310089111), 'tail': (-5.161802008046834e-08, 0.3473866581916809, 1.0934499502182007), 'parent': 'TailBase'},
            {'name': 'Tail02', 'head': (-5.161802008046834e-08, 0.3473866581916809, 1.0934499502182007), 'tail': (-6.104367855641613e-08, 0.4701418876647949, 1.0934500694274902), 'parent': 'Tail01'},
            {'name': 'Tail03', 'head': (-6.104367855641613e-08, 0.4701418876647949, 1.0934500694274902), 'tail': (-7.046933347965023e-08, 0.5928971171379089, 1.0934500694274902), 'parent': 'Tail02'},
            {'name': 'Tail04', 'head': (-7.046933347965023e-08, 0.5928971171379089, 1.0934500694274902), 'tail': (-7.989498840288434e-08, 0.7156522870063782, 1.0934500694274902), 'parent': 'Tail03'},
            {'name': 'Tail05', 'head': (-7.989498840288434e-08, 0.7156522870063782, 1.0934500694274902), 'tail': (-8.932064332611844e-08, 0.8384075164794922, 1.0934500694274902), 'parent': 'Tail04'},
            {'name': 'Tail06', 'head': (-8.932064332611844e-08, 0.8384075164794922, 1.0934500694274902), 'tail': (-9.874629824935255e-08, 0.9611627459526062, 1.0934500694274902), 'parent': 'Tail05'},
            {'name': 'Tail07', 'head': (-9.874629824935255e-08, 0.9611627459526062, 1.0934500694274902), 'tail': (-1.0817195317258665e-07, 1.0839179754257202, 1.0934500694274902), 'parent': 'Tail06'},
            {'name': 'Tail08', 'head': (-1.0817195317258665e-07, 1.0839179754257202, 1.0934500694274902), 'tail': (-1.1759760809582076e-07, 1.2066731452941895, 1.0934500694274902), 'parent': 'Tail07'},
            {'name': 'Tail09', 'head': (-1.1759760809582076e-07, 1.2066731452941895, 1.0934500694274902), 'tail': (-1.2702327012448222e-07, 1.3294284343719482, 1.0934500694274902), 'parent': 'Tail08'},
            {'name': 'Tail10', 'head': (-1.2702327012448222e-07, 1.3294284343719482, 1.0934500694274902), 'tail': (-1.364489321531437e-07, 1.452183723449707, 1.0934500694274902), 'parent': 'Tail09'},
            {'name': 'Butt.R', 'head': (-0.07663392275571823, 0.09667296707630157, 0.9645638465881348), 'tail': (-0.09502609819173813, 0.1545158475637436, 0.9259048104286194), 'parent': 'Hips'},
            {'name': 'Butt.L', 'head': (0.07663392275571823, 0.09667296707630157, 0.9645638465881348), 'tail': (0.09502609819173813, 0.1545158475637436, 0.9259048104286194), 'parent': 'Hips'},
        ]
    }
}


# Configuration dictionary for thresholds
RATING_THRESHOLDS = {
    "PC": {
        "Good": {"tri_count": 35000, "material_count": 2, "bone_count": 150, "skinned_meshes": 8},
        "Medium": {"tri_count": 70000, "material_count": 8, "bone_count": 256, "skinned_meshes": 16}
    },
    "Portable": {
        "Good": {"tri_count": 10000, "material_count": 1, "bone_count": 90, "skinned_meshes": 1},
        "Medium": {"tri_count": 15000, "material_count": 2, "bone_count": 150, "skinned_meshes": 2}
    }
}



# Function to dynamically generate the items for the dropdown menus
def get_collection_items(self, context):

    # Retrieve collections with 'exporters' custom property set to True
    items = [
        (col.name, col.name, "")
        for col in bpy.data.collections
        if col.exporters
    ]
    # If no collections are found, append ('None', 'None', '')
    if not items:
        items.append(('None', 'None', ''))
    return items
    

# Function to list armature items
def armature_items(self, context):
    # List all armatures in the scene
    items = [(obj.name, obj.name, "") for obj in bpy.data.objects if obj.type == 'ARMATURE']
    # If no armatures are available, provide a default item
    if not items:
        items.append(('None', 'None', 'No Armature'))
    return items

# Function to get scene statistics
def get_scene_stats():
    triangle_count = 0
    bone_count = 0
    skinned_meshes = 0
    unique_materials = set()

    # Ensure all armatures are updated from edit mode
    for obj in bpy.data.objects:
        if obj.type == 'ARMATURE' and obj.mode == 'EDIT':
            obj.update_from_editmode()

    depsgraph = bpy.context.evaluated_depsgraph_get()

    for obj in bpy.context.visible_objects:
        if obj.type == 'MESH':
            evaluated_obj = obj.evaluated_get(depsgraph)
            evaluated_mesh = evaluated_obj.to_mesh()
            if evaluated_mesh is None:
                continue  # Skip if mesh conversion failed

            # Use loop triangles for faster triangle count
            evaluated_mesh.calc_loop_triangles()
            triangle_count += len(evaluated_mesh.loop_triangles)

            # Collect unique materials
            unique_materials.update(mat for mat in obj.data.materials if mat)

            # Check for skinned meshes
            if obj.parent and obj.parent.type == 'ARMATURE':
                skinned_meshes += 1

            # Clean up
            evaluated_obj.to_mesh_clear()

        elif obj.type == 'ARMATURE':
            bone_count += len(obj.data.bones)

    return {
        "tri_count": triangle_count,
        "material_count": len(unique_materials),
        "bone_count": bone_count,
        "skinned_meshes": skinned_meshes
    }


# Function to get armature statistics
def get_armature_stats(armature_name):
    armature = bpy.data.objects.get(armature_name)
    if not armature or armature.type != 'ARMATURE':
        return {
            "tri_count": 0,
            "material_count": 0,
            "bone_count": 0,
            "skinned_meshes": 0
        }

    # Ensure the armature is updated from edit mode if it is in edit mode
    if armature.mode == 'EDIT':
        armature.update_from_editmode()

    tri_count = 0
    bone_count = len(armature.data.bones)
    skinned_meshes = 0
    unique_materials = set()

    depsgraph = bpy.context.evaluated_depsgraph_get()

    for mesh in armature.children:
        if mesh.type == 'MESH':
            evaluated_obj = mesh.evaluated_get(depsgraph)
            evaluated_mesh = evaluated_obj.to_mesh()
            if evaluated_mesh is None:
                continue  # Skip if mesh conversion failed

            # Use loop triangles for faster triangle counting
            evaluated_mesh.calc_loop_triangles()
            tri_count += len(evaluated_mesh.loop_triangles)

            # Collect unique materials
            unique_materials.update(mat for mat in mesh.data.materials if mat is not None)

            # Check if the mesh is skinned (has vertex groups)
            if mesh.vertex_groups:
                skinned_meshes += 1

            # Clean up
            evaluated_obj.to_mesh_clear()

    material_count = len(unique_materials)

    return {
        "tri_count": tri_count,
        "material_count": material_count,
        "bone_count": bone_count,
        "skinned_meshes": skinned_meshes
    }


# Function to get rating based on stats
def get_rating(stats, is_pc):
    device = "PC" if is_pc else "Portable"
    thresholds = RATING_THRESHOLDS[device]

    if all(stats[key] <= thresholds["Good"][key] for key in stats):
        return "Good"
    elif all(stats[key] <= thresholds["Medium"][key] for key in stats):
        return "Medium"
    else:
        return "Poor"


# Function to get icon based on value and limits
def get_icon(value, limits):
    if value == 0:
        return 'SEQUENCE_COLOR_09'
    elif value <= limits[0]:
        return 'SEQUENCE_COLOR_04'
    elif value <= limits[1]:
        return 'SEQUENCE_COLOR_02'
    else:
        return 'SEQUENCE_COLOR_01'

def get_armature_items(self, context):
    # Generate items for the dropdown menu
    return [(obj.name, obj.name, "") for obj in bpy.data.objects if obj.type == 'ARMATURE']

def get_armature_parent(mesh_obj):
    # Check if the object is a mesh
    if mesh_obj and mesh_obj.type == 'MESH':
        # Check if the object has a parent
        parent = mesh_obj.parent
        # Verify that the parent is an armature
        if parent and parent.type == 'ARMATURE':
            return parent
    return None

#DOGS main panel
class DOGS_PT_panel(Panel):
    bl_label = "DOGS"
    bl_idname = "DOGS_PT_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'DOGS'

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        #selected_export_collection = bpy.data.collections.get(bpy.context.scene.collection_selector)
        selected_export_collection = [
                                        collection for collection in bpy.data.collections
                                        if collection.get('exporters')
                                    ]
        
        row = layout.row(align=True)
        row.scale_y = 2.0
        row.operator('import_model.operator', icon='IMPORT')

        # ----------------- Export -----------------
        
        layout.separator()                 
        row = layout.row(align=True)
        row.alignment = 'RIGHT'
        row.scale_x = 1.2
        row.prop(context.scene, "collection_selector", text="Export",icon="GROUP")
      
        row.operator("object.export_collections", text="",icon="EXPORT")
            
            
        # ----------------- Avatar Armature -----------------
        
        layout.separator()
        row = layout.row(align=True)
        row.alignment = 'RIGHT'
        row.scale_x = 1.2
        row.prop(scene, 'selected_armature', text="Avatar Armature", icon="ARMATURE_DATA")
        
        # Add toggle button for additional options
        row.prop(scene, "show_extra_armature_options", text="", icon='DOWNARROW_HLT' if scene.show_extra_armature_options else 'RIGHTARROW')
       
        if scene.show_extra_armature_options:
            box = layout.box()
            box.label(text="Add Armatures", icon='OUTLINER_OB_ARMATURE')
            box.operator('add_armature.operator', text="Basic Humanoid", icon='ADD').armature_type = 'Basic'
            box.operator('add_armature.operator', text="Extended Humanoid", icon='ADD').armature_type = 'Extended'
            box.operator('add_armature.operator', text="Digitigrade Humanoid", icon='ADD').armature_type = 'Digitigrade'
        

# Panel for Mesh Stats of the avatar
class STATS_PT_panel(Panel):
    bl_label = "Stats"
    bl_idname = "STATS_PT_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'DOGS'
    bl_options = {'DEFAULT_CLOSED'}

    def draw(self, context):
        layout = self.layout
        scene = context.scene

        # Use a single EnumProperty to toggle between states
        layout.prop(scene, 'device_mode', expand=True)

        selected_armature = scene.selected_armature
        box = layout.box()
        row = box.row(align=True)
        
        if scene.rate_all_visible_obj:
            rating_for = 'All Visible Objects'
        elif selected_armature:
            rating_for = selected_armature
        else:
            rating_for = None
            
        row.label(text=f"Rating for: {rating_for}")
        row.prop(scene, "rate_all_visible_obj", text="", icon='RESTRICT_VIEW_OFF' if scene.rate_all_visible_obj else 'ARMATURE_DATA', toggle=True)

        if scene.rate_all_visible_obj:
            stats = get_scene_stats()
            
        else:
            if selected_armature and selected_armature != 'None':
                stats = get_armature_stats(selected_armature)
            else:
                layout.label(text="No Armature Selected", icon="ERROR")
                return

        is_pc = scene.device_mode == 'PC'
        device = "PC" if is_pc else "Portable"
        thresholds = RATING_THRESHOLDS[device]

        tri_icon = get_icon(stats["tri_count"], [thresholds["Good"]["tri_count"], thresholds["Medium"]["tri_count"]])
        mat_icon = get_icon(stats["material_count"], [thresholds["Good"]["material_count"], thresholds["Medium"]["material_count"]])
        bone_icon = get_icon(stats["bone_count"], [thresholds["Good"]["bone_count"], thresholds["Medium"]["bone_count"]])
        skin_icon = get_icon(stats["skinned_meshes"], [thresholds["Good"]["skinned_meshes"], thresholds["Medium"]["skinned_meshes"]])

        box = layout.box()
        box.label(text=f"Triangls: {stats['tri_count']}", icon=tri_icon)
        box.label(text=f"Materials: {stats['material_count']}", icon=mat_icon)
        box.label(text=f"Bones: {stats['bone_count']}", icon=bone_icon)
        box.label(text=f"Skinned Meshs: {stats['skinned_meshes']}", icon=skin_icon)


        box = layout.box()
        rating = get_rating(stats, is_pc)
        box.label(text=f"Rating: {rating}")
        
        
# Panel for Mesh Editing
class MESH_EDIT_PT_panel(Panel):
    bl_label = "Object & Mesh Editing"
    bl_idname = "MESH_EDIT_PT_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'DOGS'
    bl_options = {'DEFAULT_CLOSED'}

    # Define the panel UI layout
    def draw(self, context):
        layout = self.layout
        obj = context.object
        

        # ----------------- Object -----------------
        row = layout.row(align=True)
        row.alignment = 'CENTER'
        row.label(text="Object", icon="META_CUBE")
        box = layout.box()
        sub = box.row(align=True)

        if obj != None:
                
            sub.operator("object.explode_model", text="Explode Selected Objects", icon="FORCE_TURBULENCE")    
            
            # ----------------- Mesh -----------------    
            row = layout.row(align=True)
            row.alignment = 'CENTER'
            row.label(text="Mesh", icon="MESH_DATA")

            box = layout.box()
            sub = box.row(align=True)
            
            layout.enabled = obj and obj.type == 'MESH' and obj.mode == 'OBJECT' or obj.mode == 'EDIT'
            
            sub.label(text="Join Mesh:")
            sub.operator("object.join", text="Selected")
            sub.operator("object.join_visible", text="Visible")

            sub = box.row(align=True)
            sub.label(text="Separate By:")

            # Disable the 'Separate By' options if not in EDIT_MESH mode
            sub.enabled = obj.mode == 'EDIT'
            sub.scale_x = 0.96
            sub.operator("mesh.separate_by_selection", text="Selection", icon="FACESEL")

            sub = box.row()
            sub.operator("mesh.separate_by_loose_parts", text="Loose Parts", icon="STICKY_UVS_DISABLE")
            sub.operator("mesh.separate_by_materials", text="Materials", icon="MATERIAL")
            
            box = layout.box()
            sub = box.row(align=True)
            sub.label(text="Find:", icon="BORDERMOVE")
            sub.operator("object.show_ngons", text="Ngons")
            sub.operator("object.show_triangles", text="Triangels")
            
            
            # ----------------- Normals -----------------
            row = layout.row(align=True)
            row.alignment = 'CENTER'
            row.label(text="Normals", icon="NORMALS_FACE")
            box = layout.box()
            sub = box.row(align=True)

            sub.label(text="Normals:")
            sub.operator("mesh.normals_make_consistent", text="Recalculate").inside = False
            sub.operator("mesh.flip_normals", text="Flip")

            overlay = context.space_data.overlay
            face_orientation_icon = "HIDE_OFF" if overlay.show_face_orientation else "HIDE_ON"
            sub.prop(overlay, "show_face_orientation", text="", icon=face_orientation_icon)

            box = layout.box()
            sub = box.row(align=True)
            sub.label(text="Shade:")
            sub.operator("object.shade_smooth", text="Smooth")
            sub.operator("object.shade_auto_smooth", text="Auto")
            sub.operator("object.shade_flat", text="Flat")

            sub = box.row(align=True)
            sub.operator("mesh.customdata_custom_splitnormals_clear", text="Remove custom split normals", icon="X")
            
            
        else:
            sub.label(text="No Object Selected", icon="ERROR")
            row = layout.row(align=True)
            #row.label(text="No Mesh Selected", icon="ERROR")
            

# Panel for Armature Editing
class ARMATURE_EDIT_PT_panel(Panel):
    bl_label = "Armature Editing"
    bl_idname = "ARMATURE_EDIT_PT_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'DOGS'
    bl_options = {'DEFAULT_CLOSED'}

    def draw(self, context):
        layout = self.layout
        obj = context.active_object
        active_bone = context.active_bone
        
        is_armature_selected = obj and obj.type == 'ARMATURE'
        is_in_pose_mode = is_armature_selected and obj.mode == 'POSE'

        # Disable the entire layout if no armature is selected
        layout.enabled = is_armature_selected or is_armature_selected != None

        # Pose Mode Toggle Button
        mode_text = "Exit Pose Mode" if is_in_pose_mode else "Enter Pose Mode"
        mode_icon = "RADIOBUT_ON" if is_in_pose_mode else "RADIOBUT_OFF"
        layout.operator('object.toggle_pose_mode', text=mode_text, icon=mode_icon)

        if is_in_pose_mode and is_armature_selected:
            # Posing section

            row = layout.row(align=True)
            row.alignment = 'CENTER'
            row.label(text="Posing", icon="POSE_HLT")
            
            pose_box = layout.box()
            

            # Mirror Pose Option
            mirror_row = pose_box.row(align=True)
            mirror_row.prop(obj.pose, "use_mirror_x", text="Mirror Pose in X Axis", toggle=True, icon="MOD_MIRROR")
            mirror_row.operator('object.reset_pose', text="", icon='LOOP_BACK')
            pivot_icon = 'PIVOT_INDIVIDUAL' if context.scene.tool_settings.transform_pivot_point == 'INDIVIDUAL_ORIGINS' else 'PIVOT_MEDIAN'
            mirror_row.operator('object.toggle_pivot_point', text="", icon=pivot_icon)
            
            # Bone Options
            row = layout.row(align=True)
            row.alignment = 'CENTER'
            row.label(text="Bone Options", icon="BONE_DATA")
           
            bone_box = layout.box()
            bone_box.prop(obj, "show_in_front", text="Show In Front")
            bone_box.prop(obj.data, "show_axes", text="Show Axes")
            bone_box.prop(obj.data, "show_names", text="Show Names")
            bone_box.prop(obj.data, "display_type", text="Bone Type")
            bone_box.prop(obj, "display_type", text="Display As")
            
            # Bone Color
            row = layout.row(align=True)
            row.alignment = 'CENTER'
            row.label(text="Bone Color", icon="BRUSHES_ALL")
            
            bone_color_box = layout.box()
            
            if active_bone:
            
                bone_color_box.prop(obj.data, "show_bone_colors", text="Enable Bone Colors")
                bone_color_box.prop(active_bone.color, "palette", text="Bone Color")
                props = bone_color_box.operator("armature.copy_bone_color_to_selected", text="Copy Active Color to Selected")
                props.bone_type = 'EDIT'
                bone_color_box.operator("armature.copy_bone_color_to_collection", text="Copy Active Color to Collection")
            
            else:
                bone_color_box.label(text="No Bone Selected!", icon="ERROR")
            
            # Bone Collection Management
            row = layout.row(align=True)
            row.alignment = 'CENTER'
            row.label(text="Bone Collections", icon="GROUP_BONE")
            
            collection_row = layout.row()
            collection_row.template_bone_collection_tree()

            col = collection_row.column(align=True)
            col.operator("armature.collection_add", icon='ADD', text="")
            col.operator("armature.collection_remove", icon='REMOVE', text="")

            col.separator()

            col.menu("ARMATURE_MT_collection_context_menu", icon='DOWNARROW_HLT', text="")

            # Ensure active_bcoll is defined
            active_bcoll = obj.data.collections.active 
            if active_bcoll:
                col.separator()
                col.operator("armature.collection_move", icon='TRIA_UP', text="").direction = 'UP'
                col.operator("armature.collection_move", icon='TRIA_DOWN', text="").direction = 'DOWN'

            # Collection Assignment and Selection
            collection_action_row = layout.row()
            sub = collection_action_row.row(align=True)
            sub.operator("armature.collection_assign", text="Assign")
            sub.operator("armature.collection_unassign", text="Remove")

            sub = collection_action_row.row(align=True)
            sub.operator("armature.collection_select", text="Select")
            sub.operator("armature.collection_deselect", text="Deselect")
            
            

# Panel for Weight Paint Editing in DOGS category
class WEIGHT_PAINT_EDIT_PT_panel(Panel):
    bl_label = "Weight Paint Editing"
    bl_idname = "WEIGHT_PAINT_EDIT_PT_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'DOGS'
    bl_options = {'DEFAULT_CLOSED'}

    def draw(self, context):
        layout = self.layout
        obj = context.object
        overlay = context.space_data.overlay
        tool_settings = context.scene.tool_settings
        scene = context.scene     
        armature = get_armature_parent(obj)



        row = layout.row()

        if context.mode == 'PAINT_WEIGHT':
            row.operator('object.toggle_weight_paint', text="Exit Weight Paint Mode", icon='RADIOBUT_ON')
            row = layout.row()
            row.alignment = 'CENTER'
            row.label(text="Weight Paint Options", icon="WPAINT_HLT")
            box = layout.box()
            box.prop(overlay, "show_wpaint_contours", text="Show Weight Paint Contours")
            box.prop(overlay, "show_paint_wire", text="Show Wireframe")
           
            #Made as default
            #box.prop(tool_settings, "use_auto_normalize", text="Auto Normalize Weights")
           
            box.prop(tool_settings.weight_paint, "use_group_restrict", text="Paint Only in Selected Vertex Group")
           
            box.prop(scene, "paint_through_mesh", text="Paint Through Mesh")
            
            box_row = box.row(align=True)

            if armature:
                box_row.prop(armature.pose, "use_mirror_x", text="Mirror Bone Pose in X Axis", expand=True, icon='OUTLINER_DATA_ARMATURE')
                box_row.operator('object.reset_pose', text="", icon='LOOP_BACK')
            
                pivot_icon = 'PIVOT_INDIVIDUAL' if context.scene.tool_settings.transform_pivot_point == 'INDIVIDUAL_ORIGINS' else 'PIVOT_MEDIAN'
                box_row.operator('object.toggle_pivot_point', text="", icon=pivot_icon)

                row = layout.row()
                row.alignment = 'CENTER'
                row.label(text="Weight Paint Functions", icon="MOD_VERTEX_WEIGHT")
                
                box = layout.box()
                box.operator("object.vertex_group_clean", text="Clean Vertex Groups", icon="TRASH")
                
                box_fill = box.row()
                box_fill.operator(AssignVerticesToActiveGroup.bl_idname, text="Fill with 0 Weight").weight_value = 0.0
                box_fill.operator(AssignVerticesToActiveGroup.bl_idname, text="Fill with 1 Weight").weight_value = 1.0
            
                row = layout.row()
                row.alignment = 'CENTER'
                row.label(text="Bone Collections", icon="GROUP_BONE")
                
                #Get the bone collection in weightpaint mode
                with bpy.context.temp_override(armature=armature.data):
                    layout.template_bone_collection_tree()
            else:
                
                box_row.label(text="No armature selected!", icon="ERROR")

        else:

            row.operator('object.toggle_weight_paint', text="Enter Weight Paint Mode", icon='RADIOBUT_OFF')


# Operator to color bones in selected bone's collection
class ARMATURE_OT_CopyBoneColorToCollection(bpy.types.Operator):
    """Copy the active bone's color to all bones in the active bone's collection(s)"""
    bl_idname = "armature.copy_bone_color_to_collection"
    bl_label = "Copy Bone Color to Collection"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        armature_obj = context.object
        if not armature_obj or armature_obj.type != 'ARMATURE':
            cls.poll_message_set("No armature selected.")
            return False

        if armature_obj.mode != 'POSE':
            cls.poll_message_set("Armature is not in Pose Mode.")
            return False

        if not context.active_pose_bone:
            cls.poll_message_set("No active bone selected.")
            return False

        armature_data = armature_obj.data
        if not hasattr(armature_data, "collections") or not armature_data.collections:
            cls.poll_message_set("The armature does not have any bone collections.")
            return False

        return True

    def get_bone_collections(self, bone):
        """
        Returns a list of bone collections that the given bone belongs to.
        """
        armature = bone.id_data  # Gets the Armature data block the bone belongs to
        bone_collections = []
        for collection in armature.collections:
            if bone.name in [b.name for b in collection.bones]:
                bone_collections.append(collection)
        return bone_collections

    def execute(self, context):
        armature_obj = context.object
        armature_data = armature_obj.data

        # Ensure we're in Pose Mode
        if armature_obj.mode != 'POSE':
            bpy.ops.object.mode_set(mode='POSE')

        # Get the active pose bone
        active_pose_bone = context.active_pose_bone

        if not active_pose_bone:
            self.report({'WARNING'}, "No active bone selected.")
            return {'CANCELLED'}

        # Get the bone collections the active bone is in
        bone_collections = self.get_bone_collections(active_pose_bone.bone)

        if not bone_collections:
            self.report({'WARNING'}, "Active bone is not in any collection.")
            return {'CANCELLED'}

        # Get all bones in these collections
        bones_in_collections = set()
        for collection in bone_collections:
            for bone in collection.bones:
                bones_in_collections.add(bone.name)

        # If there are no other bones in the collection(s), cancel
        if len(bones_in_collections) <= 1:
            self.report({'WARNING'}, "No other bones in the collection(s).")
            return {'CANCELLED'}

        # Select all bones in these collections
        for pose_bone in armature_obj.pose.bones:
            if pose_bone.name in bones_in_collections:
                pose_bone.bone.select = True
            else:
                pose_bone.bone.select = False

        # Copy bone color to selected bones using the operator
        try:
            # Make sure only the active bone is selected (the operator copies from active to selected)
            bpy.ops.armature.copy_bone_color_to_selected()
        except RuntimeError as e:
            self.report({'ERROR'}, str(e))
            return {'CANCELLED'}

        # Deselect all bones
        for pose_bone in armature_obj.pose.bones:
            pose_bone.bone.select = False

        # Optionally, reselect the active bone
        active_pose_bone.bone.select = True

        self.report({'INFO'}, "Finished copying color to bones in the active bone's collection(s).")
        return {'FINISHED'}


class AssignVerticesToActiveGroup(bpy.types.Operator):
    """Bucket fill vertecies with the selected weight"""
    bl_idname = "object.assign_vertices_to_active_group"
    bl_label = "Assign All Vertices to Active Vertex Group"
    bl_options = {'REGISTER', 'UNDO'}

        # Set minimum and maximum values for the weight
    weight_value: bpy.props.FloatProperty(
        name="Weight Value", 
        default=0.0, 
        min=0.0,     # Minimum weight value
        max=1.0      # Maximum weight value
    )

    @classmethod
    def poll(cls, context):
        obj = context.object

        # Check if there is an active object
        if obj is None:
            cls.poll_message_set("No active object selected.")
            return False

        # Check if the active object has an active vertex group
        if obj.vertex_groups.active is None:
            cls.poll_message_set("The active object does not have an active vertex group.")
            return False

        # All conditions are met
        return True

    def execute(self, context):
        
        original_paint_settings_weight = bpy.context.scene.tool_settings.unified_paint_settings.weight
        
        bpy.context.scene.tool_settings.unified_paint_settings.weight = self.weight_value

        bpy.ops.paint.weight_set()

        bpy.context.scene.tool_settings.unified_paint_settings.weight = original_paint_settings_weight
        
        return {'FINISHED'}



# Operator to switch to Weight Paint Mode or Object Mode
class OBJECT_OT_ToggleWeightPaint(Operator):
    """Toggle Weight Paint Mode on or off"""
    bl_idname = "object.toggle_weight_paint"
    bl_label = "Toggle Weight Paint Mode"

    @classmethod
    def poll(cls, context):
        obj = context.object
        
        # Check if there is an active object
        if obj is None:
            cls.poll_message_set("No active object selected.")
            return False

        # Check if the active object is a mesh
        if obj.type != 'MESH':
            cls.poll_message_set("The active object is not a mesh.")
            return False

        # Check if a valid armature is selected in the scene
        armature_name = context.scene.selected_armature
        if armature_name == "None":
            cls.poll_message_set("No armature is in the scene.")
            return False

        # All conditions are met
        return True
    
    def execute(self, context):
        obj = context.object

        if obj is None or obj.type != 'MESH':
            self.report({'WARNING'}, "Select a mesh object first.")
            return {'CANCELLED'}

        obj_armature = obj.find_armature()

        if context.mode == 'OBJECT':
            # Check if the mesh is parented to an armature
            if not obj_armature:
                self.report({'INFO'}, "Mesh is not parented to any armature.")
                bpy.ops.object.parent_mesh_to_armature('INVOKE_DEFAULT')
                return {'CANCELLED'}

            # Switch to Weight Paint Mode
            obj.select_set(True)
            obj_armature.select_set(True)
            context.view_layer.objects.active = obj
            bpy.ops.object.mode_set(mode='EDIT')
            
            bpy.ops.mesh.select_all(action='DESELECT')
            
            bpy.ops.object.mode_set(mode='WEIGHT_PAINT')

            context.space_data.overlay.weight_paint_mode_opacity = 1
            context.scene.tool_settings.vertex_group_user = "ACTIVE"
            bpy.context.scene.tool_settings.use_auto_normalize = True


        else:
            # Switch back to Object Mode

            bpy.ops.object.mode_set(mode='OBJECT')
            bpy.ops.object.select_all(action='DESELECT')
            obj.select_set(True)
            context.view_layer.objects.active = obj

        return {'FINISHED'}

class OBJECT_OT_explode_model(bpy.types.Operator):
    """Move the selected objects away from a central point in an explosion style"""
    bl_idname = "object.explode_model"
    bl_label = "Explode Selected Objects"
    bl_options = {'REGISTER', 'UNDO'}

    distance: bpy.props.FloatProperty(
        name="Base Explode Distance",
        description="Base distance to move parts outwards",
        default=1.0,
        min=0.0,
        max=1000.0,
    )

    origin_point: bpy.props.EnumProperty(
        name="Explosion Origin",
        description="Point from which objects will move away",
        items=[
            ('SCENE_ORIGIN', "Scene Origin", "Use the scene's origin (0,0,0) as the explosion center"),
            ('SELECTION_CENTER', "Selection Center", "Use the center of the selected objects as the explosion center"),
            ('CURSOR', "3D Cursor", "Use the 3D cursor location as the explosion center"),
        ],
        default='SELECTION_CENTER',
    )

    size_based_explosion: bpy.props.BoolProperty(
        name="Size Based Explosion",
        description="When enabled, smaller objects move faster than bigger ones",
        default=False,
    )

    @classmethod
    def poll(cls, context):
        # Check if the current mode is Object mode
        if context.mode != 'OBJECT':
            cls.poll_message_set("The current mode is not Object mode.")
            return False

        # Check if at least one object is selected
        selected_objects = context.selected_objects
        if len(selected_objects) == 0:
            cls.poll_message_set("No objects selected.")
            return False

        # All conditions are met
        return True

    def execute(self, context):
        selected_objects = context.selected_objects

        # Set origin of selected objects to their bounding box centers
        bpy.ops.object.select_all(action='DESELECT')
        for obj in selected_objects:
            obj.select_set(True)
            context.view_layer.objects.active = obj
            bpy.ops.object.origin_set(type='ORIGIN_GEOMETRY', center='BOUNDS')
            obj.select_set(False)

        # Re-select all selected objects
        for obj in selected_objects:
            obj.select_set(True)
        context.view_layer.objects.active = selected_objects[0]

        # Determine the explosion origin point
        if self.origin_point == 'SCENE_ORIGIN':
            explosion_origin = Vector((0.0, 0.0, 0.0))
        elif self.origin_point == 'CURSOR':
            explosion_origin = context.scene.cursor.location.copy()
        else:
            # Compute the center of selected objects
            total_pos = Vector((0.0, 0.0, 0.0))
            for obj in selected_objects:
                total_pos += obj.location
            explosion_origin = total_pos / len(selected_objects)

        # Prepare for size-based explosion if enabled
        if self.size_based_explosion:
            # Compute sizes of objects (use bounding box diagonal length)
            sizes = {}
            for obj in selected_objects:
                # Get the world-space bounding box corners
                bbox_corners = [obj.matrix_world @ Vector(corner) for corner in obj.bound_box]
                # Calculate the maximum distance between any two corners (diagonal length)
                bbox_size = max((bbox_corners[i] - bbox_corners[j]).length for i in range(8) for j in range(8))
                sizes[obj] = bbox_size

            max_size = max(sizes.values())
            min_size = min(sizes.values())
            size_range = max_size - min_size if max_size != min_size else 1.0

            # Normalize sizes to a range of 0 to 1, invert so smaller objects have higher values
            normalized_sizes = {obj: (max_size - size) / size_range for obj, size in sizes.items()}

        # Move each object away from the explosion origin
        for obj in selected_objects:
            direction = (obj.location - explosion_origin)
            if direction.length == 0:
                # If the object is exactly at the origin, move it along Z-axis
                direction = Vector((0.0, 0.0, 1.0))
            else:
                direction.normalize()

            if self.size_based_explosion:
                # Scale distance based on size
                size_factor = normalized_sizes[obj]
                move_distance = self.distance * size_factor
            else:
                move_distance = self.distance

            obj.location += direction * move_distance

        return {'FINISHED'}

class OBJECT_OT_show_ngons(bpy.types.Operator):
    """Select faces that have more than 4 edges in the mesh objects"""
    bl_idname = "object.show_ngons"
    bl_label = "Ngons"
    
    @classmethod
    def poll(cls, context):
        # Check if any objects are selected
        if not context.selected_objects:
            cls.poll_message_set("No objects selected.")
            return False
        
        # Check if all selected objects are meshes
        for obj in context.selected_objects:
            if obj.type != 'MESH':
                cls.poll_message_set("All selected objects must be meshes.")
                return False
        
        # Check if we are in Edit Mode
        if context.object.mode != 'EDIT':
            cls.poll_message_set("To use this function, you need to be in Edit Mode.")
            return False
        
        # All conditions are met
        return True
    
    def execute(self, context):
        
        total_selected_faces = 0  # To store the total number of selected Ngons across all objects
        
        for obj in context.selected_objects:
            if obj.type == 'MESH':
                # Ensure the object is the active one
                context.view_layer.objects.active = obj

                # Get the mesh data in Edit Mode
                mesh = bmesh.from_edit_mesh(obj.data)

                # Deselect all faces first
                bpy.ops.mesh.select_all(action='DESELECT')

                bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE')

                # Select faces with more than 4 sides (Ngons)
                bpy.ops.mesh.select_face_by_sides(number=4, type='GREATER')

                # Count selected faces
                num_selected_faces = len([f for f in mesh.faces if f.select])
                total_selected_faces += num_selected_faces

                # Update the mesh in edit mode
                bmesh.update_edit_mesh(obj.data)

        if total_selected_faces > 0:
            self.report({'INFO'}, f"Found Ngons: {total_selected_faces}")
        else:
            self.report({'INFO'}, "No Ngons found in selected objects!")

        return {'FINISHED'}

class OBJECT_OT_export_collections(bpy.types.Operator):
    """Export selected collection"""
    bl_idname = "object.export_collections"
    bl_label = "Export Selected Collections"
    bl_description = "Exports the selected collection using its defined exporters if they exist"
    
    @classmethod
    def poll(cls, context):
        """Determine if the operator can be executed in the current context."""
        selected_collection = bpy.data.collections.get(context.scene.collection_selector)
        
        if selected_collection and hasattr(selected_collection, 'exporters') and selected_collection.exporters:
            return True

        cls.poll_message_set("Selected collection does not have any exporters set up.")
        return False

    def execute(self, context):
        #Selected collection
        selected_collection = bpy.data.collections.get(bpy.context.scene.collection_selector)
    
        # Store the original active collection
        original_collection = context.view_layer.active_layer_collection
        
        # Find the layer collection that matches the collection to be exported
        for layer_col in context.view_layer.layer_collection.children:
            if layer_col.collection == selected_collection:
                # Set the active layer collection to the desired collection
                context.view_layer.active_layer_collection = layer_col
                break
       
        # Call the Export all function
        bpy.ops.collection.export_all()
        
        # Print to console which collection is being exported
        self.report({'INFO'}, f"Successfully exported collection: '{layer_col.name}'.")
        
        # Restore the original active collection
        context.view_layer.active_layer_collection = original_collection

        return {'FINISHED'}

class OBJECT_OT_show_triangles(bpy.types.Operator):
    """Select faces that have exactly 3 edges in the mesh objects"""
    bl_idname = "object.show_triangles"
    bl_label = "Select Triangles"

    @classmethod
    def poll(cls, context):
        # Check if any objects are selected
        if not context.selected_objects:
            cls.poll_message_set("No objects selected.")
            return False
        
        # Check if all selected objects are meshes
        for obj in context.selected_objects:
            if obj.type != 'MESH':
                cls.poll_message_set("All selected objects must be meshes.")
                return False
        
        # Check if we are in Edit Mode
        if context.object.mode != 'EDIT':
            cls.poll_message_set("To use this function, you need to be in Edit Mode.")
            return False
        
        # All conditions are met
        return True
    
    def execute(self, context):
        total_selected_faces = 0  # To store the total number of selected triangles across all objects
        
        for obj in context.selected_objects:
            if obj.type == 'MESH':
                # Ensure the object is the active one
                context.view_layer.objects.active = obj

                # Get the mesh data in Edit Mode
                mesh = bmesh.from_edit_mesh(obj.data)

                # Deselect all faces first
                bpy.ops.mesh.select_all(action='DESELECT')
                
                bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE')

                # Select faces with exactly 3 sides (triangles)
                bpy.ops.mesh.select_face_by_sides(number=3, type='EQUAL')

                # Count selected faces
                num_selected_faces = len([f for f in mesh.faces if f.select])
                total_selected_faces += num_selected_faces

                # Update the mesh in edit mode
                bmesh.update_edit_mesh(obj.data)

        if total_selected_faces > 0:
            self.report({'INFO'}, f"Found triangles: {total_selected_faces}")
        else:
            self.report({'INFO'}, "No triangles found in selected objects!")

        return {'FINISHED'}


class OBJECT_OT_ParentMeshToArmature(Operator):
    bl_idname = "object.parent_mesh_to_armature"
    bl_label = "Parent Mesh to Armature"
    bl_description = "Select an armature to parent the mesh to"
    bl_options = {'REGISTER', 'UNDO'}

    # Use EnumProperty to create a dropdown menu
    armature_name: EnumProperty(
        name="Armature",
        description="Select Armature",
        items=get_armature_items,
        
    )

    parent_type: EnumProperty(
        name="Parent Type",
        description="Choose how to parent the mesh",
        items=[
            ('ARMATURE_NAME', "With Empty Groups", "Parent with empty groups"),
            ('ARMATURE_AUTO', "With Automatic Weights", "Parent with automatic weights")
        ],
        default='ARMATURE_AUTO'
    )

    def invoke(self, context, event):
        # Check if there are any armatures in the scene
        armatures = [(obj.name, obj.name, "") for obj in bpy.data.objects if obj.type == 'ARMATURE']

        if not armatures:
            self.report({'ERROR'}, "No armature found in the scene.")
            return {'CANCELLED'}

        # Default to the first armature found
        self.armature_name = armatures[0][0]

        # Open the dialog to select an armature
        return context.window_manager.invoke_props_dialog(self)

    def draw(self, context):
        layout = self.layout
        # Draw the dropdown menu
        layout.prop(self, "armature_name")
        layout.prop(self, "parent_type")

    def execute(self, context):
        obj = context.object
        armature_obj = bpy.data.objects.get(self.armature_name)

        if armature_obj is None:
            self.report({'ERROR'}, "Armature not found.")
            return {'CANCELLED'}

        # Select the mesh and armature
        bpy.ops.object.select_all(action='DESELECT')

        obj.select_set(True)
        armature_obj.select_set(True)

        context.view_layer.objects.active = armature_obj

        # Parent the mesh to the armature
        bpy.ops.object.parent_set(type=self.parent_type)

        bpy.ops.object.select_all(action='DESELECT')

        armature_obj.select_set(True)

        context.view_layer.objects.active = obj
        
        

        self.report({'INFO'}, f"Mesh parented to {self.armature_name}.")

        # Call back the weight paint function to actually switch to weight paint
        bpy.ops.object.toggle_weight_paint()

        return {'FINISHED'}


# Custom Operator to reset pose and maintain original selection
class OBJECT_OT_ResetPose(Operator):
    """Reset the pose of all bones and restore the original selection"""
    bl_idname = "object.reset_pose"
    bl_label = "Reset Pose"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        # Get the selected armature name from the scene property
        active_object = context.object
        # Ensure the active object matches the selected armature and is in Pose Mode
        return (
            active_object is not None and
            active_object.type == 'ARMATURE' and
            active_object.mode == 'POSE' or 
            active_object.mode == 'WEIGHT_PAINT'
            
        )

    def execute(self, context):
        # Get the active object (armature)
        selected_armature_name = context.scene.selected_armature
        active_object = context.object
        
        if active_object.name != selected_armature_name:
            armature_name = context.scene.selected_armature
            armature = bpy.data.objects.get(armature_name)
        
        else:
            armature = context.object
        

        
        original_selection = [bone.name for bone in armature.data.bones if bone.select]

        # Select all bones
        bpy.ops.pose.select_all(action='SELECT')

        # Clear location, rotation, and scale for all selected bones
        bpy.ops.pose.loc_clear()
        bpy.ops.pose.rot_clear()
        bpy.ops.pose.scale_clear()

        # Deselect all bones
        bpy.ops.pose.select_all(action='DESELECT')

        # Reselect originally selected bones
        for bone_name in original_selection:
            armature.data.bones[bone_name].select = True

        return {'FINISHED'}


# Operator to toggle the pivot point between Individual Origins and Median Point
class OBJECT_OT_TogglePivotPoint(Operator):
    bl_idname = "object.toggle_pivot_point"
    bl_label = "Toggle Pivot Point"
    bl_description = "Toggle transform pivot point between Individual Origins and Median Point"

    @classmethod
    def poll(cls, context):
            # Check if the active area is the 3D Viewport
        if context.area.type != 'VIEW_3D':
            cls.poll_message_set("The current area is not the 3D Viewport.")
            return False
        
        return True
    
    def execute(self, context):
        current_pivot = context.scene.tool_settings.transform_pivot_point
        new_pivot = 'INDIVIDUAL_ORIGINS' if current_pivot == 'MEDIAN_POINT' else 'MEDIAN_POINT'
        context.scene.tool_settings.transform_pivot_point = new_pivot
        return {'FINISHED'}


# Operator to join visible objects
class OBJECT_OT_JoinVisible(Operator):
    """Join only visible mesh objects"""
    bl_idname = "object.join_visible"
    bl_label = "Join Visible"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        # Check if there are any visible objects
        visible_objects = any(
            obj.visible_get() and obj.type == 'MESH' for obj in context.visible_objects
        )

        if not visible_objects:
            cls.poll_message_set("No visible mesh objects in the scene.")
            return False

        # Check if the current mode is Object mode
        if context.mode != 'OBJECT':
            cls.poll_message_set("The current mode is not Object mode.")
            return False

        # All conditions are met
        return True

    def execute(self, context):
        # Ensure we're in Object mode
        if context.mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT')

        # Find all visible mesh objects
        visible_mesh_objects = [
            obj for obj in context.visible_objects
            if obj.type == 'MESH' and obj.visible_get()
        ]

        # Check if there are any visible mesh objects
        if not visible_mesh_objects:
            self.report({'WARNING'}, "No visible mesh objects to join.")
            return {'CANCELLED'}

        # Select all visible mesh objects
        for obj in visible_mesh_objects:
            obj.select_set(True)

        # Set the active object to the first one in the list
        context.view_layer.objects.active = visible_mesh_objects[0]

        # Join all selected objects
        bpy.ops.object.join()

        self.report({'INFO'}, f"Joined {len(visible_mesh_objects)} mesh objects.")
        return {'FINISHED'}


# Operator to toggle pose mode for the selected armature
class OBJECT_OT_TogglePoseMode(Operator):
    """Toggle Pose Mode for the selected armature"""
    bl_idname = "object.toggle_pose_mode"
    bl_label = "Toggle Pose Mode"
    

    @classmethod
    def poll(cls, context):
        obj = context.active_object

        if obj is None:
            cls.poll_message_set("No active object selected.")
            return False

        if obj.type != 'ARMATURE':
            cls.poll_message_set("The active object is not an armature.")
            return False

        if obj.mode == 'WEIGHT_PAINT':
            cls.poll_message_set("The armature is in weight paint mode.")
            return False

        # All conditions are met
        return True

    def execute(self, context):
        
        
        armature_obj = context.active_object
        
        if armature_obj:
            if armature_obj.mode == 'POSE':
                bpy.ops.object.mode_set(mode='OBJECT')
                bpy.ops.object.select_all(action='DESELECT')
            else:
                bpy.ops.object.select_all(action='DESELECT')
                bpy.context.view_layer.objects.active = armature_obj
                bpy.ops.object.mode_set(mode='POSE')
            return {'FINISHED'}
        self.report({'WARNING'}, "Armature not found or selected")
        return {'CANCELLED'}


# Operator for separating by selection
class MESH_OT_SeparateBySelection(Operator):
    """Separates a mesh based on the selected faces"""
    bl_idname = "mesh.separate_by_selection"
    bl_label = "Separate by Selection"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        active_object = context.object
        
        if active_object is None:
            cls.poll_message_set("No active object in the context.")
            return False

        if active_object.type != 'MESH':
            cls.poll_message_set("Active object is not a mesh.")
            return False

        if active_object.mode != 'EDIT':
            cls.poll_message_set("Active object is not in edit mode.")
            return False
        
        # Check if there are any selected faces
        bm = bmesh.from_edit_mesh(active_object.data)
        if not any(face.select for face in bm.faces):
            cls.poll_message_set("No faces selected.")
            return False

        return True

    def execute(self, context):
        bpy.ops.mesh.separate(type='SELECTED')
        return {'FINISHED'}


# Operator for separating by loose parts
class MESH_OT_SeparateByLooseParts(Operator):
    """Separates a mesh based on its loose, unconnected parts"""
    bl_idname = "mesh.separate_by_loose_parts"
    bl_label = "Separate by Loose Parts"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        return context.object is not None and context.object.type == 'MESH'

    def execute(self, context):
        
        #I would love to use just bpy.ops.mesh.separate(type='LOOSE') but currently it breaks normals when used this issue was 
        #reported 2022 not fixed to this day.
        
        # Check the current mode
        initial_mode = bpy.context.active_object.mode
        
        # Ensure there is an active object and it is a mesh
        active_object = bpy.context.active_object
        if active_object is None or active_object.type != 'MESH':
            print("No active mesh object selected.")
            return

        # If not already in Edit Mode, switch to Edit Mode
        if initial_mode != 'EDIT':
            bpy.ops.object.mode_set(mode='EDIT')
        
        # Select all geometry in Edit Mode
        bpy.ops.mesh.select_all(action='SELECT')
        
        # Separate by loose parts
        bpy.ops.mesh.separate(type='LOOSE')
        
        # Deselect all geometry
        bpy.ops.mesh.select_all(action='DESELECT')
        
        # Switch back to Object Mode if it was the initial mode
        if initial_mode != 'EDIT':
            bpy.ops.object.mode_set(mode='OBJECT')

        return {'FINISHED'}
    
# Operator for separating by materials
class MESH_OT_SeparateByMaterials(Operator):
    """Separates a mesh based on the materials assigned to its faces"""
    bl_idname = "mesh.separate_by_materials"
    bl_label = "Separate by Materials"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        return context.object is not None and context.object.type == 'MESH'

    def execute(self, context):
        bpy.ops.mesh.separate(type='MATERIAL')
        return {'FINISHED'}


# Operator for importing models
class ImportModelOperator(Operator, ImportHelper):
    """Import 3D model into the scene (Supported file formats: .stl, .obj, .fbx, .glb, .gltf, .dae)"""
    bl_idname = "import_model.operator"
    bl_label = "Import Model"

    filter_glob: StringProperty(
        default='*.stl;*.obj;*.fbx;*.glb;*.gltf;*.dae',
        options={'HIDDEN'},
    )

    def execute(self, context):
        filepath = self.filepath
        ext = os.path.splitext(filepath)[1].lower()
        import_ops = {
            '.stl': bpy.ops.wm.stl_import,
            '.obj': bpy.ops.wm.obj_import,
            '.fbx': bpy.ops.wm.fbx_import,
            '.glb': bpy.ops.wm.gltf_import,
            '.gltf': bpy.ops.wm.gltf_import,
            '.dae': bpy.ops.wm.dae_import,
        }
        operator = import_ops.get(ext)
        if operator:
            if operator.poll():
                try:
                    operator(filepath=filepath)
                except Exception as e:
                    self.report({'ERROR'}, f"Failed to import '{ext}' file: {e}")
                    return {'CANCELLED'}
                return {'FINISHED'}
            else:
                self.report({'ERROR'}, f"Import operator for '{ext}' files is not available.")
                return {'CANCELLED'}
        else:
            self.report({'ERROR'}, f"Unsupported file extension: {ext}")
            return {'CANCELLED'}


class AddArmatureOperator(Operator):
    """Add a predefined armature into the scene"""
    bl_idname = "add_armature.operator"
    bl_label = "Add Armature"
    bl_options = {'REGISTER', 'UNDO'}
    armature_type: StringProperty()

    def execute(self, context):
        if bpy.context.active_object and bpy.context.active_object.mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT')

        armature_data = ARMATURE_TYPES[self.armature_type]

        bpy.ops.object.add(type='ARMATURE')
        obj = bpy.context.object
        obj.name = armature_data['name']
        armature = obj.data
        armature.name = armature_data['name']

        obj.show_in_front = True
        obj.data.display_type = 'OCTAHEDRAL'
        obj.display_type = 'WIRE'

        bpy.ops.object.mode_set(mode='EDIT')

        bones = {}
        for bone_data in armature_data['bones']:
            bone = armature.edit_bones.new(bone_data['name'])
            bone.head = bone_data['head']
            bone.tail = bone_data['tail']
            bones[bone_data['name']] = bone

        for bone_data in armature_data['bones']:
            if bone_data['parent']:
                child_bone = bones[bone_data['name']]
                parent_bone = bones[bone_data['parent']]
                child_bone.parent = parent_bone
                # Only set use_connect if child_bone.head is at parent_bone.tail
                if (child_bone.head - parent_bone.tail).length < 1e-6:
                    child_bone.use_connect = True

        bpy.ops.object.mode_set(mode='OBJECT')

        return {'FINISHED'}


def update_brush_settings(context):
    """Update brush settings based on the toggle state."""
    # Filter brushes that are relevant for weight painting
    weight_paint_brushes = [brush for brush in bpy.data.brushes if brush.use_paint_weight]
    
    for brush in weight_paint_brushes:
        if context.scene.paint_through_mesh:
            # When the toggle is enabled
            brush.use_frontface = False
            brush.use_frontface_falloff = False
            brush.falloff_shape = 'PROJECTED'
        else:
            # When the toggle is disabled
            brush.use_frontface = True
            brush.use_frontface_falloff = True
            brush.falloff_shape = 'SPHERE'


# Register classes and properties
def register():
    bpy.utils.register_class(DOGS_PT_panel)
    bpy.utils.register_class(STATS_PT_panel)
    bpy.utils.register_class(MESH_EDIT_PT_panel)
    bpy.utils.register_class(ARMATURE_EDIT_PT_panel)
    bpy.utils.register_class(ImportModelOperator)
    bpy.utils.register_class(AddArmatureOperator)
    bpy.utils.register_class(OBJECT_OT_JoinVisible)
    bpy.utils.register_class(MESH_OT_SeparateBySelection)
    bpy.utils.register_class(MESH_OT_SeparateByLooseParts)
    bpy.utils.register_class(MESH_OT_SeparateByMaterials)
    bpy.utils.register_class(OBJECT_OT_TogglePoseMode)
    bpy.utils.register_class(OBJECT_OT_TogglePivotPoint)
    bpy.utils.register_class(OBJECT_OT_ResetPose)
    bpy.utils.register_class(OBJECT_OT_ToggleWeightPaint)
    bpy.utils.register_class(OBJECT_OT_ParentMeshToArmature)
    bpy.utils.register_class(WEIGHT_PAINT_EDIT_PT_panel)
    bpy.utils.register_class(AssignVerticesToActiveGroup)
    bpy.utils.register_class(ARMATURE_OT_CopyBoneColorToCollection)
    bpy.utils.register_class(OBJECT_OT_explode_model)
    bpy.utils.register_class(OBJECT_OT_show_ngons)
    bpy.utils.register_class(OBJECT_OT_show_triangles)
    bpy.utils.register_class(OBJECT_OT_export_collections)
    
    bpy.types.Scene.collection_selector = bpy.props.EnumProperty(
        name="Collection Selector",
        description="Select the active collection",
        items=get_collection_items,
    )
    
    bpy.types.Scene.paint_through_mesh = bpy.props.BoolProperty(
        name="Paint Through Mesh",
        description="Enable or disable paint through mesh",
        default=False,
        update=lambda self, context: update_brush_settings(context)
    )
    
    bpy.types.Scene.rate_all_visible_obj = BoolProperty(
        name="Rate All Visible Objects",
        description="Toggle to rate all visible objects or only the mesh parented to the selected armature",
        default=False
    )

    bpy.types.Scene.show_extra_armature_options = BoolProperty(
        name="Add Armature Menu",
        description="Toggle to show or hide extra armature creation options",
        default=False
    )

        
    bpy.types.Scene.selected_armature = EnumProperty(
        name="Selected Armature",
        description="Armature of the avatar you want the performance statistics for",
        items=armature_items,
    )
    bpy.types.Scene.device_mode = EnumProperty(
        name="Device Mode",
        description="Select Device Mode",
        items=[
            ('PC', "PC VR", "PC Virtual Reality"),
            ('Portable', "Portable VR", "Portable Virtual Reality"),
        ],
        default='PC'
    )
    
    

# Unregister classes and properties
def unregister():
    bpy.utils.unregister_class(DOGS_PT_panel)
    bpy.utils.unregister_class(STATS_PT_panel)
    bpy.utils.unregister_class(MESH_EDIT_PT_panel)
    bpy.utils.unregister_class(ARMATURE_EDIT_PT_panel)
    bpy.utils.unregister_class(ImportModelOperator)
    bpy.utils.unregister_class(AddArmatureOperator)
    bpy.utils.unregister_class(OBJECT_OT_JoinVisible)
    bpy.utils.unregister_class(MESH_OT_SeparateBySelection)
    bpy.utils.unregister_class(MESH_OT_SeparateByLooseParts)
    bpy.utils.unregister_class(MESH_OT_SeparateByMaterials)
    bpy.utils.unregister_class(OBJECT_OT_TogglePoseMode)
    bpy.utils.unregister_class(OBJECT_OT_TogglePivotPoint)
    bpy.utils.unregister_class(OBJECT_OT_ResetPose)
    bpy.utils.unregister_class(OBJECT_OT_ToggleWeightPaint)
    bpy.utils.unregister_class(OBJECT_OT_ParentMeshToArmature)
    bpy.utils.unregister_class(WEIGHT_PAINT_EDIT_PT_panel)
    bpy.utils.unregister_class(AssignVerticesToActiveGroup)
    bpy.utils.unregister_class(ARMATURE_OT_CopyBoneColorToCollection)
    bpy.utils.unregister_class(OBJECT_OT_explode_model)
    bpy.utils.unregister_class(OBJECT_OT_show_ngons)
    bpy.utils.unregister_class(OBJECT_OT_show_triangles)
    bpy.utils.unregister_class(OBJECT_OT_export_collections)

    del bpy.types.Scene.collection_selector
    del bpy.types.Scene.paint_through_mesh
    del bpy.types.Scene.rate_all_visible_obj
    del bpy.types.Scene.show_extra_armature_options
    del bpy.types.Scene.selected_armature
    del bpy.types.Scene.device_mode


if __name__ == "__main__":
    register()
